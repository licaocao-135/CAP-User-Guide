{"compress":true,"commitItems":[["a8d6e521-7957-42e9-8615-fda5adfd0a6d",1630374820769,"---\nenable html: true\n---\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed.\n",[[1630374807177,["lixia@LAPTOP-FEL3RH8E",[[-1,28,"Lorem ipsum"],[1,39,"T"]],[28,39],[29,29]]],[1630374809096,["lixia@LAPTOP-FEL3RH8E",[[-1,28,"T"]],[29,29],[28,28]]],[1630374815499,["lixia@LAPTOP-FEL3RH8E",[[1,28,"tomcat应用镜像构建"]],[28,28],[40,40]]],[1630374818626,["lixia@LAPTOP-FEL3RH8E",[[-1,42,"Lorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed."]],[42,948],[42,42]]],[1630374853606,["lixia@LAPTOP-FEL3RH8E",[[1,42,"Cloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。"]],[42,42],[125,125]]],[1630374875209,["lixia@LAPTOP-FEL3RH8E",[[1,126,"\n"]],[125,125],[126,126]]],[1630374876778,["lixia@LAPTOP-FEL3RH8E",[[-1,126,"\n"],[1,127,"您"]],[126,126],[127,127]]],[1630374878389,["lixia@LAPTOP-FEL3RH8E",[[1,127,"可以使用"]],[127,127],[131,131]]],[1630374886460,["lixia@LAPTOP-FEL3RH8E",[[1,131,"tomcat应用镜像构建，讲"]],[131,131],[145,145]]],[1630374886899,["lixia@LAPTOP-FEL3RH8E",[[-1,144,"讲"]],[145,145],[144,144]]],[1630374897531,["lixia@LAPTOP-FEL3RH8E",[[1,144,"将Java语言的代码"]],[144,144],[154,154]]],[1630375029101,["lixia@LAPTOP-FEL3RH8E",[[1,145,"Maven或Gradle构建后"]],[145,145],[160,160]]],[1630375035133,["lixia@LAPTOP-FEL3RH8E",[[-1,164,"语言的代码"],[1,169,"软件"]],[164,164],[166,166]]],[1630375058015,["lixia@LAPTOP-FEL3RH8E",[[1,166,"包构建为镜像软件包"]],[166,166],[175,175]]],[1630375068886,["lixia@LAPTOP-FEL3RH8E",[[1,175,"，并推送到容器镜像仓库中。"]],[175,175],[188,188]]],[1630375074397,["lixia@LAPTOP-FEL3RH8E",[[-1,42,"Cloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。"]],[42,125],[42,42]]],[1630375075407,["lixia@LAPTOP-FEL3RH8E",[[-1,42,"\n"]],[42,42],[42,42]]],[1630375082571,["lixia@LAPTOP-FEL3RH8E",[[1,104,"tomcat应用构建"]],[104,104],[114,114]]],[1630375083177,["lixia@LAPTOP-FEL3RH8E",[[-1,112,"构建"]],[114,114],[112,112]]],[1630375116733,["lixia@LAPTOP-FEL3RH8E",[[1,112,"镜像构建不需要编写Dockerfile文件，"]],[112,112],[134,134]]],[1630375137657,["lixia@LAPTOP-FEL3RH8E",[[1,134,"可以更简便地实现镜像构建。"]],[134,134],[147,147]]],[1630375144535,["lixia@LAPTOP-FEL3RH8E",[[1,147,"\n\n"]],[147,147],[148,148]]],[1630375144817,["lixia@LAPTOP-FEL3RH8E",[[1,149,"\n"]],[148,148],[149,149]]],[1630375170998,["lixia@LAPTOP-FEL3RH8E",[[1,149,"### 前提条件\n* 构建的代码库中已上传Dockerfile文件。Dockerfile的信息请参见[Docker官网](https://www.docker.org.cn/)。\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle、NPM、Conan构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > Docker镜像构建”步骤。\n2. 根据下表的描述，设置Docker镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>工具版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>工作目录</td>\n    <td>执行<b>docker build</b>的目录。</td>\n  </tr>\n<tr>\n    <td>Dockerfile路径</td>\n    <td>Dockefile相对于“工作目录”的路径。</td>\n</tr>\n<tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n"]],[149,149],[1566,1566]]],[1630375174624,["lixia@LAPTOP-FEL3RH8E",[[-1,158,"* 构建的代码库中已上传Dockerfile文件。Dockerfile的信息请参见[Docker官网](https://www.docker.org.cn/)。"]],[158,238],[158,158]]],[1630375175338,["lixia@LAPTOP-FEL3RH8E",[[-1,158,"\n"]],[158,158],[157,157]]],[1630375186481,["lixia@LAPTOP-FEL3RH8E",[[-1,96,"容器"],[1,98,"D"]],[96,98],[97,97]]],[1630375187768,["lixia@LAPTOP-FEL3RH8E",[[1,97,"ocker"]],[97,97],[102,102]]],[1630375202292,["lixia@LAPTOP-FEL3RH8E",[[-1,432,"、NPM、Conan"]],[432,442],[432,432]]],[1630375295785,["lixia@LAPTOP-FEL3RH8E",[[-1,514,"Docker"],[1,520,"tomcat"]],[514,514],[520,520]]],[1630375297132,["lixia@LAPTOP-FEL3RH8E",[[1,520,"应用"]],[520,520],[522,522]]],[1630375321642,["lixia@LAPTOP-FEL3RH8E",[[1,146,"Java工程的"]],[146,146],[153,153]]],[1630375337349,["lixia@LAPTOP-FEL3RH8E",[[-1,551,"Docker"],[1,557,"tomcat"]],[551,551],[557,557]]],[1630375338654,["lixia@LAPTOP-FEL3RH8E",[[1,557,"应用"]],[557,557],[559,559]]],[1630375345394,["lixia@LAPTOP-FEL3RH8E",[[-1,604,"docker"],[1,610,"tomcat"]],[604,604],[610,610]]],[1630375357080,["lixia@LAPTOP-FEL3RH8E",[[-1,777,"工具"],[1,779,"tomcat版本和JDK"]],[777,781],[791,791]]],[1630375687833,["lixia@LAPTOP-FEL3RH8E",[[1,827,"\n"]],[826,826],[827,827]]],[1630375688632,["lixia@LAPTOP-FEL3RH8E",[[1,827,"<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取代码部署文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为部署文件。</li><li>其他路径：暂不支持，后续版本支持。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示部署文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择部署文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>"]],[827,827],[1295,1295]]],[1630375701631,["lixia@LAPTOP-FEL3RH8E",[[-1,939,"li>其他路径：暂不支持，后续版本支持。</li><"]],[938,964],[938,938]]],[1630375736323,["lixia@LAPTOP-FEL3RH8E",[[1,1270,"\n"]],[1269,1269],[1270,1270]]],[1630375737701,["lixia@LAPTOP-FEL3RH8E",[[1,1270,"<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>"]],[1270,1270],[1443,1443]]],[1630375759542,["lixia@LAPTOP-FEL3RH8E",[[-1,1728,"<tr>\n    <td>工作目录</td>\n    <td>执行<b>docker build</b>的目录。</td>\n  </tr>\n<tr>\n    <td>Dockerfile路径</td>\n    <td>Dockefile相对于“工作目录”的路径。</td>\n</tr>"]],[1728,1870],[1728,1728]]],[1630375760102,["lixia@LAPTOP-FEL3RH8E",[[-1,1728,"\n"]],[1728,1728],[1728,1728]]],[1630376043537,["lixia@LAPTOP-FEL3RH8E",[[1,42,"如果构建的代码采用Java语言编写，"]],[42,42],[60,60]]],[1630377107096,["lixia@LAPTOP-FEL3RH8E",[[-1,911,"部署"],[1,913,"构建源"],[-1,946,"部署"],[1,948,"构建源"],[-1,1036,"部署"],[1,1038,"构建源"],[-1,1117,"部署"],[1,1119,"构建源"]],[845,1287],[1291,1291]]],[1630378369415,["lixia@LAPTOP-FEL3RH8E",[[1,520,"\n"]],[519,519],[520,520]]],[1630378376626,["lixia@LAPTOP-FEL3RH8E",[[1,306,"     "]],[306,306],[311,311]]],[1630378378680,["lixia@LAPTOP-FEL3RH8E",[[1,186,"   "]],[186,186],[189,189]]],[1630398595654,["lixia@LAPTOP-FEL3RH8E",[[1,60,"qie"]],[60,60],[63,63]]],[1630398596900,["lixia@LAPTOP-FEL3RH8E",[[-1,60,"qie"]],[63,63],[60,60]]],[1630398606403,["lixia@LAPTOP-FEL3RH8E",[[1,60,"且编码工程为War"]],[60,60],[69,69]]],[1630398636938,["lixia@LAPTOP-FEL3RH8E",[[1,65,"的打包格式"]],[65,65],[70,70]]],[1630398649421,["lixia@LAPTOP-FEL3RH8E",[[-1,74,"您"]],[74,74],[74,74]]],[1630398653165,["lixia@LAPTOP-FEL3RH8E",[[1,74,"包，则"]],[74,74],[77,77]]],[1630398672760,["lixia@LAPTOP-FEL3RH8E",[[-1,465,"您可以将Maven、Gradle构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。  "]],[465,532],[465,465]]],[1630398673336,["lixia@LAPTOP-FEL3RH8E",[[-1,464,"\n"]],[465,465],[464,464]]],[1630398764407,["lixia@LAPTOP-FEL3RH8E",[[-1,180,"Java工程"],[1,186,"tomcat"]],[180,180],[186,186]]],[1630398765519,["lixia@LAPTOP-FEL3RH8E",[[1,186,"应用"]],[186,186],[188,188]]],[1630400103345,["lixia@LAPTOP-FEL3RH8E",[[1,196,"\n"]],[194,194],[195,195]]],[1630400113902,["lixia@LAPTOP-FEL3RH8E",[[1,197,"\n"]],[195,195],[196,196]]],[1630400124441,["lixia@LAPTOP-FEL3RH8E",[[1,196,"tomcat应用镜像构建，"]],[196,196],[209,209]]],[1630400126002,["lixia@LAPTOP-FEL3RH8E",[[-1,208,"，"]],[209,209],[208,208]]],[1630400130536,["lixia@LAPTOP-FEL3RH8E",[[1,208,"支持将Java E"]],[208,208],[217,217]]],[1630400131105,["lixia@LAPTOP-FEL3RH8E",[[-1,216,"E"]],[217,217],[216,216]]],[1630400133678,["lixia@LAPTOP-FEL3RH8E",[[1,216,"wEB"]],[216,216],[219,219]]],[1630400134226,["lixia@LAPTOP-FEL3RH8E",[[-1,217,"EB"]],[219,219],[217,217]]],[1630400134947,["lixia@LAPTOP-FEL3RH8E",[[1,217,"EB"]],[217,217],[219,219]]],[1630400135538,["lixia@LAPTOP-FEL3RH8E",[[-1,217,"EB"]],[219,219],[217,217]]],[1630400146697,["lixia@LAPTOP-FEL3RH8E",[[1,217,"eb类应用以tomcat"]],[217,217],[229,229]]],[1630400189438,["lixia@LAPTOP-FEL3RH8E",[[1,229,"的方式进行容器镜像构建，"]],[229,229],[241,241]]],[1630400196361,["lixia@LAPTOP-FEL3RH8E",[[-1,240,"，"]],[241,241],[240,240]]],[1630400197074,["lixia@LAPTOP-FEL3RH8E",[[1,240,"。"]],[240,240],[241,241]]],[1630400246417,["lixia@LAPTOP-FEL3RH8E",[[1,241,"在构建时"]],[241,241],[245,245]]],[1630400269494,["lixia@LAPTOP-FEL3RH8E",[[1,245,"只需指定"]],[245,245],[249,249]]],[1630400352998,["lixia@LAPTOP-FEL3RH8E",[[1,249,"编译后的文件和构建版本"]],[249,249],[260,260]]],[1630400353842,["lixia@LAPTOP-FEL3RH8E",[[-1,258,"版本"]],[260,260],[258,258]]],[1630400360211,["lixia@LAPTOP-FEL3RH8E",[[1,258,"工具版本即可"]],[258,258],[264,264]]],[1630400361555,["lixia@LAPTOP-FEL3RH8E",[[-1,262,"即可"]],[264,264],[262,262]]],[1630400386824,["lixia@LAPTOP-FEL3RH8E",[[1,262,"即可完成Java web类应用"]],[262,262],[277,277]]],[1630400400716,["lixia@LAPTOP-FEL3RH8E",[[1,277,"的容器镜像构建，而无需比爱那些D"]],[277,277],[293,293]]],[1630400402551,["lixia@LAPTOP-FEL3RH8E",[[-1,286,"无需比爱那些D"]],[293,293],[286,286]]],[1630400403321,["lixia@LAPTOP-FEL3RH8E",[[1,286,"WUX"]],[286,286],[289,289]]],[1630400404044,["lixia@LAPTOP-FEL3RH8E",[[-1,286,"WUX"]],[289,289],[286,286]]],[1630400410563,["lixia@LAPTOP-FEL3RH8E",[[1,286,"无需编写Dockerfile文件，"]],[286,286],[303,303]]],[1630400452459,["lixia@LAPTOP-FEL3RH8E",[[1,303,"操作更建边，"]],[303,303],[309,309]]],[1630400453514,["lixia@LAPTOP-FEL3RH8E",[[-1,306,"建边，"]],[309,309],[306,306]]],[1630400459062,["lixia@LAPTOP-FEL3RH8E",[[1,306,"简便，效率更高。"]],[306,306],[314,314]]],[1630400879495,["lixia@LAPTOP-FEL3RH8E",[[-1,42,"如果构建的代码采用Java语言编写，且编码工程的打包格式为War包，则可以使用tomcat应用镜像构建，将Maven或Gradle构建后Java软件包构建为镜像软件包，并推送到Docker镜像仓库中。tomcat应用镜像构建不需要编写Dockerfile文件，可以更简便地实现tomcat应用的镜像构建。\n"]],[42,195],[42,42]]],[1630400879981,["lixia@LAPTOP-FEL3RH8E",[[-1,42,"\n"]],[42,42],[41,41]]]],null,"lixia@LAPTOP-FEL3RH8E"],["9ae7f13c-0022-4e31-ac5e-d1e71d8b4464",1630401519602,"---\nenable html: true\n---\n# tomcat应用镜像构建\n\ntomcat应用镜像构建支持将Java web类应用以tomcat的方式进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成Java web类应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件   \n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息     \n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。        \n\n### 操作步骤\n\n1. 在流水线任务中，添加“构建 > tomcat应用镜像构建”步骤。\n2. 根据下表的描述，设置tomcat应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-tomcat-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>tomcat版本和JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取代码构建源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为构建源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1630401494103,["lixia@LAPTOP-FEL3RH8E",[[-1,834,"代码"]],[836,836],[834,834]]],[1630401495526,["lixia@LAPTOP-FEL3RH8E",[[1,834,"镜像"]],[834,834],[836,836]]],[1630401497422,["lixia@LAPTOP-FEL3RH8E",[[1,838,"的"]],[838,838],[839,839]]],[1630401500225,["lixia@LAPTOP-FEL3RH8E",[[1,873,"镜像"]],[873,873],[875,875]]],[1630401501479,["lixia@LAPTOP-FEL3RH8E",[[1,877,"的"]],[877,877],[878,878]]],[1630401507555,["lixia@LAPTOP-FEL3RH8E",[[1,967,"镜像"]],[967,967],[969,969]]],[1630401511703,["lixia@LAPTOP-FEL3RH8E",[[1,1051,"镜像"]],[1051,1051],[1053,1053]]]],null,"lixia@LAPTOP-FEL3RH8E"],["8cb56100-d6c6-4e12-9877-53e265734da4",1639103044895,"---\nenable html: true\n---\n# tomcat应用镜像构建\n\ntomcat应用镜像构建支持将Java web类应用以tomcat的方式进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成Java web类应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件   \n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息     \n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。        \n\n### 操作步骤\n\n1. 在流水线任务中，添加“构建 > tomcat应用镜像构建”步骤。\n2. 根据下表的描述，设置tomcat应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-tomcat-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>tomcat版本和JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取镜像构建的源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为镜像构建的源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示镜像构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择镜像构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1639102992839,["lixia@LAPTOP-FEL3RH8E",[[-1,320,"Cloud Native"]],[320,332],[320,320]]],[1639102993789,["lixia@LAPTOP-FEL3RH8E",[[1,320,"本"]],[320,320],[321,321]]],[1639102997651,["lixia@LAPTOP-FEL3RH8E",[[-1,363,"Cloud Native"],[1,375,"本"]],[363,363],[364,364]]],[1639102998848,["lixia@LAPTOP-FEL3RH8E",[[1,364,"系统"]],[364,364],[366,366]]],[1639103000360,["lixia@LAPTOP-FEL3RH8E",[[-1,320,"本"]],[321,321],[320,320]]]],null,"lixia@LAPTOP-FEL3RH8E"],["d0426832-9637-44b2-895c-70c943de17ca",1639533564835,"---\nenable html: true\n---\n# tomcat应用镜像构建\n\ntomcat应用镜像构建支持将Java web类应用以tomcat的方式进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成Java web类应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件   \n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息     \n您可以将Docker镜像构建后的制品推送到系统的Docker仓库，也可以推送到第三方Docker仓库。           \n本系统的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。        \n\n### 操作步骤\n\n1. 在流水线任务中，添加“构建 > tomcat应用镜像构建”步骤。\n2. 根据下表的描述，设置tomcat应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-tomcat-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>tomcat版本和JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取镜像构建的源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为镜像构建的源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示镜像构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择镜像构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1639533541659,["lixia@LAPTOP-FEL3RH8E",[[-1,1303,"普通"]],[1305,1305],[1303,1303]]],[1639533542954,["lixia@LAPTOP-FEL3RH8E",[[1,1303,"liush"]],[1303,1303],[1308,1308]]],[1639533543942,["lixia@LAPTOP-FEL3RH8E",[[-1,1303,"liush"]],[1308,1308],[1303,1303]]],[1639533545805,["lixia@LAPTOP-FEL3RH8E",[[1,1303,"流水线"]],[1303,1303],[1306,1306]]]],null,"lixia@LAPTOP-FEL3RH8E"],["9c11812f-73e7-444b-8398-aa702b27c425",1640920728186,"---\nenable html: true\n---\n# tomcat应用镜像构建\n\ntomcat应用镜像构建支持将Java web类应用以tomcat的方式进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成Java web类应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件   \n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息     \n您可以将Docker镜像构建后的制品推送到系统的Docker仓库，也可以推送到第三方Docker仓库。           \n本系统的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。        \n\n### 操作步骤\n\n1. 在流水线任务中，添加“构建 > tomcat应用镜像构建”步骤。\n2. 根据下表的描述，设置tomcat应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-tomcat-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>tomcat版本和JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取镜像构建的源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为镜像构建的源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示镜像构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择镜像构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置流水线参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1640920722177,["lixia@LAPTOP-FEL3RH8E",[[-1,214," 管理授权类接入点.html"],[1,228,"-"]],[214,228],[215,215]]],[1640920727165,["lixia@LAPTOP-FEL3RH8E",[[1,215,"manage-auth-ap.md"]],[215,215],[232,232]]],[1640920743605,["lixia@LAPTOP-FEL3RH8E",[[-1,1304," 设置流水线参数.html"],[1,1317,"-set-parms.md"]],[1304,1317],[1317,1317]]],[1640920747433,["lixia@LAPTOP-FEL3RH8E",[[-1,1479," 设置流水线参数.html"],[1,1492,"-set-parms.md"]],[1479,1492],[1492,1492]]],[1640920750453,["lixia@LAPTOP-FEL3RH8E",[[-1,1622," 设置流水线参数.html"],[1,1635,"-set-parms.md"]],[1622,1635],[1635,1635]]],[1640920763663,["lixia@LAPTOP-FEL3RH8E",[[-1,1822," 管理授权类接入点.html"],[1,1836,"-manage-auth-ap.md"]],[1822,1836],[1840,1840]]]],null,"lixia@LAPTOP-FEL3RH8E"]]}