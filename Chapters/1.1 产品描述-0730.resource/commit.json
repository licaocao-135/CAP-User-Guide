{"compress":true,"commitItems":[["72b081c4-a6dd-4af8-8bfe-2d79d5decb92",1627262725839,"---\nenable html: true\n---\n# 产品描述\n\nCloud Native是一款一站式DevOps平台， 涵盖软件研发从构想、开发、测试到交付的全过程。通过统一工具链，实现文化、流程、工具的协同改进和提升，降低应用软件高频发布带来的风险，提升软件产品质量。\n\nDevOps改变了研发、运维的生产方式，打破组织壁垒，实现研发与运维的跨域协同，市场运营、产品经理和工程师可以共享同一个工作台，提升交付效率，真正贯通Development和Operations。\n\n### 功能架构\nCloud Native的功能架构如下图所示。\n \n <img src=\"fig/功能结构-01-01.png\" style=\"zoom:50%\">\n\n### 技术架构\nCloud Native采用云原生技术架构。云原生技术架构充分继承了云的设计思想，基于云计算的基础技术（如资源隔离、分布式、高可用），最大程度发挥了云的优势，帮助企业构建弹性可靠、松耦合、易管理可观测的应用系统，提升交付效率，降低运维复杂度。\n\n云原生技术架构具有如下能力优势：\n* **秒级/毫秒级弹性响应能力**       \n  相对于虚拟机的分钟级弹性响应，以容器技术为基础的云原生技术架构可实现秒级甚至毫秒级的弹性响应。\n* **服务自治故障自愈能力**         \n  云原生技术栈具有高度自动化的分发调度调机制，可实现应用故障的自动摘除与重构，具有极强的自愈能力及随意处置性。\n  \n* **大规模可复制能力**        \n  可实现跨区域、跨平台甚至跨服务商的规模化复制部署能力。\n\n* **资源利用能力**     \n  云原生的异构资源标准化，容器技术有效解决了异构环境的部署一致性问题，促进了资源的标准化，为服务化、自动化。容器技术的进程级资源切分粒度，降低系统的资源开销。云原生能加速数字基础设施升级，降低用户数字化技术的使用门槛，从而提高资源的复合利用率。\n\n* **云效能释放能力**       \n  云原生采用标准的技术栈、标准的服务架构、标准的API接口、标准的容器化打包方式、微服务技术，提升交付能力，实现应用的可移植性。\n\n### 融合的理念\n* **敏捷**      \n    Cloud Native融合敏捷中应用最广泛的Scrum框架，通过用户故事地图和需求模型规划和分解需求，生成产品待办列表。通过迭代冲刺，规划迭代计划和迭代开发内容，跟踪迭代开发进展。通过知识库管理过程中的所有过程和知识产物。\n    \n* **SAFe**       \n    Cloud Native通过项目群管理版本火车的愿景、路线图、团队、CoP等，通过项目管理每个PI的具体研发过程，并提供项目群层级和项目层级的两层度量，从而实现SAFe规模化敏捷。\n    \n* **DevOps**      \n    Cloud Native秉承DevOps的流动、反馈和持续学习与实验的三原则，通过用户故事地图、多维度迭代看板、自动化测试、流水线、微服务等实践，实现过程可视化、自动化、可度量，实现产品增量快速、高质量、持续地流向客户。\n    \n* **持续交付**       \n  Cloud Native提供可视化、可定制的自动交付流水线，将代码检查、编译构建、测试、部署等多种类型的任务纳入流水线，实现任务的自动化执行。并充分利用云上资源的弹性能力，大大缩短流水线的执行时间，实现云端可持续交付。\n\n* **微服务**       \nCloud Native提供一站式微服务管理，包括微服的工程创建、应用部署、配置管理、服务治理（路由、熔断、限流）、服务调用链路追踪等。同时提供了Spring Cloud和Istio两种微服务治理方案供用户选择，大大降低了微服务架构的使用门槛。\n",[[1627262687888,["lixia@LAPTOP-FEL3RH8E",[[-1,61," 涵盖软件研发从构想、开发、测试到交付的全过程。通过统一工具链，"]],[61,93],[61,61]]],[1627263400373,["lixia@LAPTOP-FEL3RH8E",[[1,267,"-0730"]],[267,267],[272,272]]],[1627263421975,["lixia@LAPTOP-FEL3RH8E",[[-1,1158,"* **DevOps**      \n    Cloud Native秉承DevOps的流动、反馈和持续学习与实验的三原则，通过用户故事地图、多维度迭代看板、自动化测试、流水线、微服务等实践，实现过程可视化、自动化、可度量，实现产品增量快速、高质量、持续地流向客户。\n    \n* **持续交付**       \n  Cloud Native提供可视化、可定制的自动交付流水线，将代码检查、编译构建、测试、部署等多种类型的任务纳入流水线，实现任务的自动化执行。并充分利用云上资源的弹性能力，大大缩短流水线的执行时间，实现云端可持续交付。\n\n* **微服务**       \nCloud Native提供一站式微服务管理，包括微服的工程创建、应用部署、配置管理、服务治理（路由、熔断、限流）、服务调用链路追踪等。同时提供了Spring Cloud和Istio两种微服务治理方案供用户选择，大大降低了微服务架构的使用门槛。"]],[1158,1567],[1158,1158]]],[1627263422649,["lixia@LAPTOP-FEL3RH8E",[[-1,1158,"\n"]],[1158,1158],[1157,1157]]]],null,"lixia@LAPTOP-FEL3RH8E"],["c80d7f83-b48c-4ae7-aad8-012bd29644fe",1627350489103,"---\nenable html: true\n---\n# 产品描述\n\nCloud Native是一款一站式DevOps平台，实现文化、流程、工具的协同改进和提升，降低应用软件高频发布带来的风险，提升软件产品质量。\n\nDevOps改变了研发、运维的生产方式，打破组织壁垒，实现研发与运维的跨域协同，市场运营、产品经理和工程师可以共享同一个工作台，提升交付效率，真正贯通Development和Operations。\n\n### 功能架构\nCloud Native的功能架构如下图所示。\n \n <img src=\"fig/功能结构-01-01-0730.png\" style=\"zoom:50%\">\n\n### 技术架构\nCloud Native采用云原生技术架构。云原生技术架构充分继承了云的设计思想，基于云计算的基础技术（如资源隔离、分布式、高可用），最大程度发挥了云的优势，帮助企业构建弹性可靠、松耦合、易管理可观测的应用系统，提升交付效率，降低运维复杂度。\n\n云原生技术架构具有如下能力优势：\n* **秒级/毫秒级弹性响应能力**       \n  相对于虚拟机的分钟级弹性响应，以容器技术为基础的云原生技术架构可实现秒级甚至毫秒级的弹性响应。\n* **服务自治故障自愈能力**         \n  云原生技术栈具有高度自动化的分发调度调机制，可实现应用故障的自动摘除与重构，具有极强的自愈能力及随意处置性。\n  \n* **大规模可复制能力**        \n  可实现跨区域、跨平台甚至跨服务商的规模化复制部署能力。\n\n* **资源利用能力**     \n  云原生的异构资源标准化，容器技术有效解决了异构环境的部署一致性问题，促进了资源的标准化，为服务化、自动化。容器技术的进程级资源切分粒度，降低系统的资源开销。云原生能加速数字基础设施升级，降低用户数字化技术的使用门槛，从而提高资源的复合利用率。\n\n* **云效能释放能力**       \n  云原生采用标准的技术栈、标准的服务架构、标准的API接口、标准的容器化打包方式、微服务技术，提升交付能力，实现应用的可移植性。\n\n### 融合的理念\n* **敏捷**      \n    Cloud Native融合敏捷中应用最广泛的Scrum框架，通过用户故事地图和需求模型规划和分解需求，生成产品待办列表。通过迭代冲刺，规划迭代计划和迭代开发内容，跟踪迭代开发进展。通过知识库管理过程中的所有过程和知识产物。\n    \n* **SAFe**       \n    Cloud Native通过项目群管理版本火车的愿景、路线图、团队、CoP等，通过项目管理每个PI的具体研发过程，并提供项目群层级和项目层级的两层度量，从而实现SAFe规模化敏捷。\n    \n",[[1627350436029,["lixia@LAPTOP-FEL3RH8E",[[1,239,"      "]],[239,239],[245,245]]],[1627350436548,["lixia@LAPTOP-FEL3RH8E",[[-1,245,"\n"]],[245,245],[245,245]]],[1627350438421,["lixia@LAPTOP-FEL3RH8E",[[1,301," \n"]],[300,300],[302,302]]],[1627350441702,["lixia@LAPTOP-FEL3RH8E",[[1,302,"> "]],[302,302],[304,304]]],[1627350443280,["lixia@LAPTOP-FEL3RH8E",[[-1,301," > "]],[304,304],[301,301]]],[1627350447217,["lixia@LAPTOP-FEL3RH8E",[[-1,302,"\n"]],[301,301],[300,300]]],[1627350450172,["lixia@LAPTOP-FEL3RH8E",[[1,301," \n"]],[300,300],[302,302]]],[1627350452442,["lixia@LAPTOP-FEL3RH8E",[[1,302,"》"]],[302,302],[303,303]]],[1627350453188,["lixia@LAPTOP-FEL3RH8E",[[-1,302,"》"]],[303,303],[302,302]]],[1627350454082,["lixia@LAPTOP-FEL3RH8E",[[1,302,"> "]],[302,302],[304,304]]],[1627350456844,["lixia@LAPTOP-FEL3RH8E",[[-1,301," "]],[302,302],[301,301]]],[1627350458169,["lixia@LAPTOP-FEL3RH8E",[[1,303," "]],[302,302],[303,303]]],[1627350460524,["lixia@LAPTOP-FEL3RH8E",[[1,303,"{"]],[303,303],[304,304]]],[1627350462666,["lixia@LAPTOP-FEL3RH8E",[[-1,303,"{"]],[304,304],[303,303]]],[1627350463593,["lixia@LAPTOP-FEL3RH8E",[[1,303,"[]"]],[303,303],[305,305]]],[1627350466463,["lixia@LAPTOP-FEL3RH8E",[[1,304,"!No"]],[304,304],[307,307]]],[1627350467009,["lixia@LAPTOP-FEL3RH8E",[[-1,306,"o"]],[307,307],[306,306]]],[1627350467859,["lixia@LAPTOP-FEL3RH8E",[[1,306,"OTE"]],[306,306],[309,309]]],[1627350469666,["lixia@LAPTOP-FEL3RH8E",[[1,310,"\n"]],[310,310],[311,311]]],[1627350471061,["lixia@LAPTOP-FEL3RH8E",[[1,311,">"]],[311,311],[312,312]]],[1627350471525,["lixia@LAPTOP-FEL3RH8E",[[1,313," "]],[312,312],[313,313]]],[1627350476983,["lixia@LAPTOP-FEL3RH8E",[[1,313,"CES"]],[313,313],[316,316]]],[1627350477708,["lixia@LAPTOP-FEL3RH8E",[[-1,313,"CES"]],[316,316],[313,313]]],[1627350479990,["lixia@LAPTOP-FEL3RH8E",[[1,313,"CESHI"]],[313,313],[318,318]]],[1627350480960,["lixia@LAPTOP-FEL3RH8E",[[-1,313,"CESHI"]],[318,318],[313,313]]],[1627350481606,["lixia@LAPTOP-FEL3RH8E",[[1,313,"CE"]],[313,313],[315,315]]],[1627350482241,["lixia@LAPTOP-FEL3RH8E",[[-1,313,"CE"]],[315,315],[313,313]]],[1627350483702,["lixia@LAPTOP-FEL3RH8E",[[1,313,"ceshi"]],[313,313],[318,318]]],[1627350483835,["lixia@LAPTOP-FEL3RH8E",[[1,319," "]],[318,318],[319,319]]],[1627350485205,["lixia@LAPTOP-FEL3RH8E",[[-1,313,"ceshi "]],[319,319],[313,313]]],[1627350488625,["lixia@LAPTOP-FEL3RH8E",[[1,313,"测试和应用管理"]],[313,313],[320,320]]],[1627350491977,["lixia@LAPTOP-FEL3RH8E",[[1,320,"服务不在"]],[320,320],[324,324]]],[1627350493925,["lixia@LAPTOP-FEL3RH8E",[[-1,323,"在"]],[324,324],[323,323]]],[1627350502993,["lixia@LAPTOP-FEL3RH8E",[[1,313,"本版本不包括"]],[313,313],[319,319]]],[1627350506692,["lixia@LAPTOP-FEL3RH8E",[[-1,328,"不 "]],[330,330],[328,328]]],[1627350507358,["lixia@LAPTOP-FEL3RH8E",[[1,328,"，"]],[328,328],[329,329]]],[1627350508314,["lixia@LAPTOP-FEL3RH8E",[[-1,328,"，"]],[329,329],[328,328]]],[1627350516386,["lixia@LAPTOP-FEL3RH8E",[[1,328,"。测试和应用管理服务后续发布。"]],[328,328],[343,343]]],[1627350547942,["lixia@LAPTOP-FEL3RH8E",[[1,1206,"    \n"]],[1200,1200],[1205,1205]]],[1627350548430,["lixia@LAPTOP-FEL3RH8E",[[-1,1201,"    "],[1,1205,"\n"]],[1205,1205],[1202,1202]]],[1627350549073,["lixia@LAPTOP-FEL3RH8E",[[1,1202,"* **DevOps**      \n    Cloud Native秉承DevOps的流动、反馈和持续学习与实验的三原则，通过用户故事地图、多维度迭代看板、自动化测试、流水线、微服务等实践，实现过程可视化、自动化、可度量，实现产品增量快速、高质量、持续地流向客户。\n    \n* **持续交付**       \n  Cloud Native提供可视化、可定制的自动交付流水线，将代码检查、编译构建、测试、部署等多种类型的任务纳入流水线，实现任务的自动化执行。并充分利用云上资源的弹性能力，大大缩短流水线的执行时间，实现云端可持续交付。"]],[1202,1202],[1470,1470]]],[1627350557502,["lixia@LAPTOP-FEL3RH8E",[[-1,1281,"自动化测试、"]],[1281,1287],[1281,1281]]],[1627350561629,["lixia@LAPTOP-FEL3RH8E",[[-1,1284,"、微服务"]],[1288,1288],[1284,1284]]]],null,"lixia@LAPTOP-FEL3RH8E"],["844220e2-6909-4004-a4be-474a2be954e3",1627351244803,"---\nenable html: true\n---\n# 产品描述\n\nCloud Native是一款一站式DevOps平台，实现文化、流程、工具的协同改进和提升，降低应用软件高频发布带来的风险，提升软件产品质量。\n\nDevOps改变了研发、运维的生产方式，打破组织壁垒，实现研发与运维的跨域协同，市场运营、产品经理和工程师可以共享同一个工作台，提升交付效率，真正贯通Development和Operations。\n\n### 功能架构\nCloud Native的功能架构如下图所示。       \n <img src=\"fig/功能结构-01-01-0730.png\" style=\"zoom:50%\">\n> [!NOTE]\n> 本版本不包括测试和应用管理服务。测试和应用管理服务后续发布。\n\n### 技术架构\nCloud Native采用云原生技术架构。云原生技术架构充分继承了云的设计思想，基于云计算的基础技术（如资源隔离、分布式、高可用），最大程度发挥了云的优势，帮助企业构建弹性可靠、松耦合、易管理可观测的应用系统，提升交付效率，降低运维复杂度。\n\n云原生技术架构具有如下能力优势：\n* **秒级/毫秒级弹性响应能力**       \n  相对于虚拟机的分钟级弹性响应，以容器技术为基础的云原生技术架构可实现秒级甚至毫秒级的弹性响应。\n* **服务自治故障自愈能力**         \n  云原生技术栈具有高度自动化的分发调度调机制，可实现应用故障的自动摘除与重构，具有极强的自愈能力及随意处置性。\n  \n* **大规模可复制能力**        \n  可实现跨区域、跨平台甚至跨服务商的规模化复制部署能力。\n\n* **资源利用能力**     \n  云原生的异构资源标准化，容器技术有效解决了异构环境的部署一致性问题，促进了资源的标准化，为服务化、自动化。容器技术的进程级资源切分粒度，降低系统的资源开销。云原生能加速数字基础设施升级，降低用户数字化技术的使用门槛，从而提高资源的复合利用率。\n\n* **云效能释放能力**       \n  云原生采用标准的技术栈、标准的服务架构、标准的API接口、标准的容器化打包方式、微服务技术，提升交付能力，实现应用的可移植性。\n\n### 融合的理念\n* **敏捷**      \n    Cloud Native融合敏捷中应用最广泛的Scrum框架，通过用户故事地图和需求模型规划和分解需求，生成产品待办列表。通过迭代冲刺，规划迭代计划和迭代开发内容，跟踪迭代开发进展。通过知识库管理过程中的所有过程和知识产物。\n    \n* **SAFe**       \n    Cloud Native通过项目群管理版本火车的愿景、路线图、团队、CoP等，通过项目管理每个PI的具体研发过程，并提供项目群层级和项目层级的两层度量，从而实现SAFe规模化敏捷。\n\n* **DevOps**      \n    Cloud Native秉承DevOps的流动、反馈和持续学习与实验的三原则，通过用户故事地图、多维度迭代看板、流水线等实践，实现过程可视化、自动化、可度量，实现产品增量快速、高质量、持续地流向客户。\n    \n* **持续交付**       \n  Cloud Native提供可视化、可定制的自动交付流水线，将代码检查、编译构建、测试、部署等多种类型的任务纳入流水线，实现任务的自动化执行。并充分利用云上资源的弹性能力，大大缩短流水线的执行时间，实现云端可持续交付。\n    \n",[[1627351244207,["lixia@LAPTOP-FEL3RH8E",[[1,300,"          "]],[300,300],[310,310]]]],null,"lixia@LAPTOP-FEL3RH8E"]]}