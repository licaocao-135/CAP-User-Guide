{"compress":true,"commitItems":[["d199c068-100f-498e-8f83-e751d5cfdd8d",1614741767783,"---\nenable html: true\n---\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed.\n",[[1614741764839,["lixia@LAPTOP-FEL3RH8E",[[-1,28,"Lorem ipsum"],[1,39,"执行Docker命令"]],[28,39],[38,38]]],[1614838477459,["lixia@LAPTOP-FEL3RH8E",[[-1,36,"命令"]],[36,38],[36,36]]],[1614838478312,["lixia@LAPTOP-FEL3RH8E",[[-1,28,"执行"]],[30,30],[28,28]]],[1614838482480,["lixia@LAPTOP-FEL3RH8E",[[1,34,"镜像"]],[34,34],[36,36]]],[1614928077158,["lixia@LAPTOP-FEL3RH8E",[[-1,38,"Lorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed."]],[38,944],[38,38]]],[1614928239420,["lixia@LAPTOP-FEL3RH8E",[[1,38,"Flow 通过 Docker 构建组件，提供对各语言的通用镜像构建能力，让用户可以通过使用代码库中的 Dockerfile 构建容器镜像，并推送到阿里云或者自定义的容器镜像仓库中。"]],[38,38],[128,128]]],[1614928251815,["lixia@LAPTOP-FEL3RH8E",[[-1,38,"Flow "],[1,43,"C"]],[38,43],[39,39]]],[1614928255564,["lixia@LAPTOP-FEL3RH8E",[[1,39,"loud Native"]],[39,39],[50,50]]],[1614928258015,["lixia@LAPTOP-FEL3RH8E",[[-1,52," "]],[53,53],[52,52]]],[1614928258641,["lixia@LAPTOP-FEL3RH8E",[[-1,58," "]],[59,59],[58,58]]],[1614928267832,["lixia@LAPTOP-FEL3RH8E",[[-1,79,"让用户"],[1,82,"使"]],[79,79],[80,80]]],[1614928268618,["lixia@LAPTOP-FEL3RH8E",[[1,80,"您"]],[80,80],[81,81]]],[1614928280045,["lixia@LAPTOP-FEL3RH8E",[[-1,92," "]],[93,93],[92,92]]],[1614928280964,["lixia@LAPTOP-FEL3RH8E",[[-1,102," "]],[103,103],[102,102]]],[1614928287534,["lixia@LAPTOP-FEL3RH8E",[[-1,113,"阿里云或者自定义的"]],[113,122],[113,113]]],[1614928289025,["lixia@LAPTOP-FEL3RH8E",[[1,122,"\n"]],[121,121],[122,122]]],[1614928289378,["lixia@LAPTOP-FEL3RH8E",[[1,123,"\n"]],[122,122],[123,123]]],[1614928319719,["lixia@LAPTOP-FEL3RH8E",[[-1,123,"\n"]],[123,123],[122,122]]],[1614928323639,["lixia@LAPTOP-FEL3RH8E",[[1,123,"\n"]],[122,122],[123,123]]],[1614928329592,["lixia@LAPTOP-FEL3RH8E",[[1,123,"Cloud Native提供Docker"]],[123,123],[143,143]]],[1614928495437,["lixia@LAPTOP-FEL3RH8E",[[1,143,"镜像仓库。仓库"]],[143,143],[150,150]]],[1614928495831,["lixia@LAPTOP-FEL3RH8E",[[-1,148,"仓库"]],[150,150],[148,148]]],[1614928520068,["lixia@LAPTOP-FEL3RH8E",[[1,148,"Docker镜像仓库的信息请通过项目的“制品库 > d"]],[148,148],[175,175]]],[1614928520568,["lixia@LAPTOP-FEL3RH8E",[[-1,174,"d"]],[175,175],[174,174]]],[1614928521641,["lixia@LAPTOP-FEL3RH8E",[[1,174,"docker"]],[174,174],[180,180]]],[1614928521770,["lixia@LAPTOP-FEL3RH8E",[[1,181,"\n"]],[180,180],[181,181]]],[1614928522398,["lixia@LAPTOP-FEL3RH8E",[[-1,181,"\n"]],[181,181],[180,180]]],[1614928525874,["lixia@LAPTOP-FEL3RH8E",[[1,180,"镜像”查看。"]],[180,180],[186,186]]],[1614928526211,["lixia@LAPTOP-FEL3RH8E",[[1,187,"\n"]],[186,186],[187,187]]],[1614928534117,["lixia@LAPTOP-FEL3RH8E",[[1,161,"  "]],[161,161],[163,163]]],[1614928535771,["lixia@LAPTOP-FEL3RH8E",[[1,190,"\n"]],[189,189],[190,190]]],[1614928541756,["lixia@LAPTOP-FEL3RH8E",[[-1,190,"\n"],[1,191,"#"]],[190,190],[191,191]]],[1614928548261,["lixia@LAPTOP-FEL3RH8E",[[1,191,"## 配置Docker镜像"]],[191,191],[204,204]]],[1614928549790,["lixia@LAPTOP-FEL3RH8E",[[1,204,"\n\n"]],[204,204],[205,205]]],[1614928551581,["lixia@LAPTOP-FEL3RH8E",[[1,206,"\n"]],[205,205],[206,206]]],[1614928552061,["lixia@LAPTOP-FEL3RH8E",[[-1,206,"\n"]],[206,206],[205,205]]],[1614928552379,["lixia@LAPTOP-FEL3RH8E",[[-1,205,"\n"],[1,206,"1"]],[205,205],[206,206]]],[1614928589706,["lixia@LAPTOP-FEL3RH8E",[[1,206,". 获取Docker"]],[206,206],[216,216]]],[1614928596055,["lixia@LAPTOP-FEL3RH8E",[[1,216,"镜像仓库的信息。\n2. \n2. "]],[216,216],[228,228]]],[1614928596858,["lixia@LAPTOP-FEL3RH8E",[[-1,225,"2. "]],[228,228],[225,225]]],[1614928616465,["lixia@LAPTOP-FEL3RH8E",[[1,225,"    在项目的“制品库 > docker镜像”中，"]],[225,225],[251,251]]],[1614928617172,["lixia@LAPTOP-FEL3RH8E",[[-1,249,"中，"]],[251,251],[249,249]]],[1614928633542,["lixia@LAPTOP-FEL3RH8E",[[1,249,"界面中，单击右上角的”查看docker镜像信息“"]],[249,249],[273,273]]],[1614928655008,["lixia@LAPTOP-FEL3RH8E",[[1,273,"。"]],[273,273],[274,274]]],[1614928655539,["lixia@LAPTOP-FEL3RH8E",[[1,275,"    \n"]],[274,274],[279,279]]],[1614928661385,["lixia@LAPTOP-FEL3RH8E",[[1,229,"\n    "]],[229,229],[234,234]]],[1614928709255,["lixia@LAPTOP-FEL3RH8E",[[1,284," <img src=\"fig/流水线-npm-配置.png\" style=\"zoom:50%\">"]],[284,284],[332,332]]],[1614928713163,["lixia@LAPTOP-FEL3RH8E",[[-1,303,"npm-配置"],[1,309,"d"]],[303,309],[303,304]]],[1614928717684,["lixia@LAPTOP-FEL3RH8E",[[1,304,"ocker-仓库"]],[303,303],[312,312]]],[1614928719592,["lixia@LAPTOP-FEL3RH8E",[[1,284,"\n     "]],[284,284],[290,290]]],[1614928720391,["lixia@LAPTOP-FEL3RH8E",[[1,342,"      \n"]],[341,341],[348,348]]],[1614928727859,["lixia@LAPTOP-FEL3RH8E",[[1,278,"，获取docker"]],[278,278],[287,287]]],[1614928729311,["lixia@LAPTOP-FEL3RH8E",[[-1,281,"docker"]],[287,287],[281,281]]],[1614928739261,["lixia@LAPTOP-FEL3RH8E",[[1,281,"Docker仓库的地址、用户名、密码"]],[281,281],[299,299]]],[1614928748621,["lixia@LAPTOP-FEL3RH8E",[[-1,289,"的"]],[290,290],[289,289]]],[1614928752745,["lixia@LAPTOP-FEL3RH8E",[[1,292,"仓库项目名称、"]],[292,292],[299,299]]],[1614928755716,["lixia@LAPTOP-FEL3RH8E",[[1,305,"等信息"]],[305,305],[308,308]]],[1614928770531,["lixia@LAPTOP-FEL3RH8E",[[1,382,"将"]],[382,382],[383,383]]],[1614928790782,["lixia@LAPTOP-FEL3RH8E",[[1,382,"（可选）建议执行："]],[382,382],[391,391]]],[1614928792713,["lixia@LAPTOP-FEL3RH8E",[[1,392," "]],[392,392],[393,393]]],[1614928792814,["lixia@LAPTOP-FEL3RH8E",[[1,379,"  "]],[393,393],[395,395]]],[1614928797831,["lixia@LAPTOP-FEL3RH8E",[[-1,392,"   "]],[395,395],[392,392]]],[1614928827304,["lixia@LAPTOP-FEL3RH8E",[[1,392,"Docker仓库的登录信息作为授权参数"]],[392,392],[411,411]]],[1614929070654,[null,[[-1,379,"  "],[1,392,"：将"]],[379,379],[394,394]]],[1614929070654,[null,[[1,379,"  "],[-1,390,"：将"]],[394,394],[379,379]]],[1614929044424,["lixia@LAPTOP-FEL3RH8E",[[1,391,"创建用户名密码类型的授权参数，保存"]],[391,391],[408,408]]],[1614929045652,["lixia@LAPTOP-FEL3RH8E",[[-1,408,"将"]],[408,408],[408,408]]],[1614929049322,["lixia@LAPTOP-FEL3RH8E",[[-1,421,"作为授权参数"]],[421,427],[421,421]]],[1614929052638,["lixia@LAPTOP-FEL3RH8E",[[1,421,"。\n3. \n3. "]],[421,421],[426,426]]],[1614929053904,["lixia@LAPTOP-FEL3RH8E",[[-1,423,"3. "]],[426,426],[423,423]]],[1614929069698,["lixia@LAPTOP-FEL3RH8E",[[1,423,"  1. 进入流水线编辑界面，单击”"]],[423,423],[441,441]]],[1614929130637,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929130637,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929073356,["lixia@LAPTOP-FEL3RH8E",[[1,441,"授权参数“页签"]],[441,441],[448,448]]],[1614929077532,["lixia@LAPTOP-FEL3RH8E",[[-1,440,"”"]],[441,441],[440,440]]],[1614929077841,["lixia@LAPTOP-FEL3RH8E",[[1,440,"“"]],[440,440],[441,441]]],[1614929080158,["lixia@LAPTOP-FEL3RH8E",[[-1,445,"“"]],[446,446],[445,445]]],[1614929080487,["lixia@LAPTOP-FEL3RH8E",[[1,445,"”"]],[445,445],[446,446]]],[1614929082502,["lixia@LAPTOP-FEL3RH8E",[[1,448,"。"]],[448,448],[449,449]]],[1614929083176,["lixia@LAPTOP-FEL3RH8E",[[1,450,"  2. \n"]],[449,449],[455,455]]],[1614929106744,["lixia@LAPTOP-FEL3RH8E",[[1,455,"在授权参数列表界面右上方，单击“新建参数”。"]],[455,455],[477,477]]],[1614929107391,["lixia@LAPTOP-FEL3RH8E",[[1,478,"  3. \n"]],[477,477],[483,483]]],[1614929114230,["lixia@LAPTOP-FEL3RH8E",[[1,483,"在新建"]],[483,483],[486,486]]],[1614929115047,["lixia@LAPTOP-FEL3RH8E",[[-1,484,"新建"]],[486,486],[484,484]]],[1614929118168,["lixia@LAPTOP-FEL3RH8E",[[1,484,"“新建参数"]],[484,484],[489,489]]],[1614929121356,["lixia@LAPTOP-FEL3RH8E",[[-1,487,"参数"]],[489,489],[487,487]]],[1614929125613,["lixia@LAPTOP-FEL3RH8E",[[1,487,"授权参数”界面"]],[487,487],[494,494]]],[1614929126709,["lixia@LAPTOP-FEL3RH8E",[[-1,492,"界面"]],[494,494],[492,492]]],[1614929129840,["lixia@LAPTOP-FEL3RH8E",[[1,492,"对话框中，"]],[492,492],[497,497]]],[1614929190700,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929190700,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929140972,["lixia@LAPTOP-FEL3RH8E",[[1,497,"自定义“参数名称”，设置授权"]],[497,497],[511,511]]],[1614929141316,["lixia@LAPTOP-FEL3RH8E",[[-1,509,"授权"]],[511,511],[509,509]]],[1614929144298,["lixia@LAPTOP-FEL3RH8E",[[1,509,"“授权类型为"]],[509,509],[515,515]]],[1614929144769,["lixia@LAPTOP-FEL3RH8E",[[-1,514,"为"]],[515,515],[514,514]]],[1614929161899,["lixia@LAPTOP-FEL3RH8E",[[1,514,"”为“用户名密码”，然后再"]],[514,514],[527,527]]],[1614929163275,["lixia@LAPTOP-FEL3RH8E",[[-1,526,"再"]],[527,527],[526,526]]],[1614929179442,["lixia@LAPTOP-FEL3RH8E",[[1,526,"在用户名和密码参数中输入Docker仓库的登录信息。"]],[526,526],[552,552]]],[1614929180072,["lixia@LAPTOP-FEL3RH8E",[[-1,551,"。"]],[552,552],[551,551]]],[1614929183703,["lixia@LAPTOP-FEL3RH8E",[[1,551,"，单击\""]],[551,551],[555,555]]],[1614929183754,["lixia@LAPTOP-FEL3RH8E",[[-1,554,"\""],[1,555,"“"]],[555,555],[555,555]]],[1614929184382,["lixia@LAPTOP-FEL3RH8E",[[1,555,"que"]],[555,555],[558,558]]],[1614929185598,["lixia@LAPTOP-FEL3RH8E",[[-1,555,"que"]],[558,558],[555,555]]],[1614929187351,["lixia@LAPTOP-FEL3RH8E",[[1,555,"确定“"]],[555,555],[558,558]]],[1614929188721,["lixia@LAPTOP-FEL3RH8E",[[-1,557,"“"]],[558,558],[557,557]]],[1614929190603,["lixia@LAPTOP-FEL3RH8E",[[1,557,"”。"]],[557,557],[559,559]]],[1614929310700,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929310700,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929265564,["lixia@LAPTOP-FEL3RH8E",[[1,560,"  4. \n"]],[559,559],[565,565]]],[1614929266656,["lixia@LAPTOP-FEL3RH8E",[[-1,562,"4. "]],[565,565],[562,562]]],[1614929268328,["lixia@LAPTOP-FEL3RH8E",[[1,562,"   <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">"]],[562,562],[615,615]]],[1614929269576,["lixia@LAPTOP-FEL3RH8E",[[1,565,"\n     "]],[565,565],[571,571]]],[1614929272137,["lixia@LAPTOP-FEL3RH8E",[[-1,596,"仓库"]],[598,598],[596,596]]],[1614929273155,["lixia@LAPTOP-FEL3RH8E",[[1,596,"参数"]],[596,596],[598,598]]],[1614929370729,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929370729,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929352580,["lixia@LAPTOP-FEL3RH8E",[[1,625,"配置Docker步骤/"]],[625,625],[636,636]]],[1614929353235,["lixia@LAPTOP-FEL3RH8E",[[-1,635,"/"]],[636,636],[635,635]]],[1614929357736,["lixia@LAPTOP-FEL3RH8E",[[1,635,"。\n4. \n4. "]],[635,635],[640,640]]],[1614929358576,["lixia@LAPTOP-FEL3RH8E",[[-1,637,"4. "]],[640,640],[637,637]]],[1614929361138,["lixia@LAPTOP-FEL3RH8E",[[1,637,"    都在"]],[637,637],[643,643]]],[1614929361513,["lixia@LAPTOP-FEL3RH8E",[[-1,641,"都在"]],[643,643],[641,641]]],[1614929369421,["lixia@LAPTOP-FEL3RH8E",[[1,641,"在流水线的任务编辑界面中，"]],[641,641],[654,654]]],[1614929392164,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929392164,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929384233,["lixia@LAPTOP-FEL3RH8E",[[1,654,"添加Docker步骤，设置步骤的名称，"]],[654,654],[673,673]]],[1614929452166,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929452166,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929412343,["lixia@LAPTOP-FEL3RH8E",[[1,673,"在命令框中输入要执行的Npm命令，然后，单击“保存”。"]],[673,673],[700,700]]],[1614929415531,["lixia@LAPTOP-FEL3RH8E",[[-1,684,"Npm"],[1,687,"D"]],[684,687],[685,685]]],[1614929416489,["lixia@LAPTOP-FEL3RH8E",[[1,685,"ocker"]],[685,685],[690,690]]],[1614929478384,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929478384,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929460838,["lixia@LAPTOP-FEL3RH8E",[[1,622,"     \n"]],[621,621],[627,627]]],[1614929465890,["lixia@LAPTOP-FEL3RH8E",[[1,647,"\n    "]],[647,647],[652,652]]],[1614929467480,["lixia@LAPTOP-FEL3RH8E",[[1,715,"    \n"]],[714,714],[719,719]]],[1614929470190,["lixia@LAPTOP-FEL3RH8E",[[1,719,"<img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">"]],[719,719],[769,769]]],[1614929473291,["lixia@LAPTOP-FEL3RH8E",[[-1,744,"参数"],[1,746,"p"]],[744,746],[744,745]]],[1614929473967,["lixia@LAPTOP-FEL3RH8E",[[-1,744,"p"],[1,745,"配置"]],[744,744],[746,746]]],[1614929475832,["lixia@LAPTOP-FEL3RH8E",[[1,719,"\n    "]],[714,714],[719,719]]],[1614929477108,["lixia@LAPTOP-FEL3RH8E",[[1,775,"    \n"]],[774,774],[779,779]]],[1614929492565,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614929492565,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614929491594,["lixia@LAPTOP-FEL3RH8E",[[1,783,"配置Docker命令。\n5. "]],[783,783],[798,798]]],[1614930620013,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614930620013,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614930607286,["lixia@LAPTOP-FEL3RH8E",[[1,798,"\n5. "]],[794,794],[798,798]]],[1614930608276,["lixia@LAPTOP-FEL3RH8E",[[-1,795,"5. "]],[798,798],[795,795]]],[1614930617156,["lixia@LAPTOP-FEL3RH8E",[[1,795,"     Docker命令请参见"]],[795,795],[811,811]]],[1614930630430,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614930630430,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614930627220,["lixia@LAPTOP-FEL3RH8E",[[1,811,"[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)"]],[811,811],[888,888]]],[1614930690434,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614930690434,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614930645039,["lixia@LAPTOP-FEL3RH8E",[[1,800,"Npm常用构建命令如下所示。"]],[800,800],[814,814]]],[1614930646831,["lixia@LAPTOP-FEL3RH8E",[[-1,801,"pm"],[1,803,"D"]],[801,803],[802,802]]],[1614930648751,["lixia@LAPTOP-FEL3RH8E",[[-1,800,"ND"]],[802,802],[800,800]]],[1614930651536,["lixia@LAPTOP-FEL3RH8E",[[1,800,"Docker"]],[800,800],[806,806]]],[1614930659624,["lixia@LAPTOP-FEL3RH8E",[[1,823,"完整"]],[823,823],[825,825]]],[1614930660422,["lixia@LAPTOP-FEL3RH8E",[[-1,823,"完整"]],[825,825],[823,823]]],[1614930664442,["lixia@LAPTOP-FEL3RH8E",[[1,817,"其它"]],[817,817],[819,819]]],[1614930666589,["lixia@LAPTOP-FEL3RH8E",[[1,908,"     \n"]],[907,907],[913,913]]],[1614930669185,["lixia@LAPTOP-FEL3RH8E",[[1,800,"\n     "]],[800,800],[806,806]]],[1614932631814,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614932631814,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614932619989,["lixia@LAPTOP-FEL3RH8E",[[1,920,"\n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\nsh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\nsh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \nsh \"docker push ${<定义的docker镜像名称>}\"\nsh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\nsh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \nsh \"docker push ${hubImgName}\"\nsh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n"]],[919,919],[2165,2165]]],[1614932625303,["lixia@LAPTOP-FEL3RH8E",[[-1,920,"\n"]],[920,920],[920,920]]],[1614932626794,["lixia@LAPTOP-FEL3RH8E",[[-1,919,"\n"]],[919,919],[919,919]]],[1614932628202,["lixia@LAPTOP-FEL3RH8E",[[1,919,"\n"]],[919,919],[919,919]]],[1614932629689,["lixia@LAPTOP-FEL3RH8E",[[-1,914,"     "]],[914,919],[914,914]]],[1614932630370,["lixia@LAPTOP-FEL3RH8E",[[-1,914,"\n"]],[914,914],[914,914]]],[1614932636402,[null,[[-1,379,"  "],[1,391,"行："]],[379,379],[393,393]]],[1614932636402,[null,[[1,379,"  "],[-1,389,"行："]],[393,393],[379,379]]],[1614932635419,["lixia@LAPTOP-FEL3RH8E",[[-1,2158,"5. "],[1,2161,"\n"]],[2158,2161],[2158,2158]]]],null,"lixia@LAPTOP-FEL3RH8E"],["7aebc2e7-6cbb-4816-96e8-5290f45d34f7",1615425057941,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息  请通过项目的“制品库 > docker镜像”查看。\n\n### 配置Docker镜像\n1. 获取Docker镜像仓库的信息。\n    \n    在项目的“制品库 > docker镜像”界面中，单击右上角的”查看docker镜像信息“，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。\n    \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。\n     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。\n    \n    在流水线的任务编辑界面中，添加Docker步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后，单击“保存”。\n    \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。\n     \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)\n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\nsh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\nsh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \nsh \"docker push ${<定义的docker镜像名称>}\"\nsh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\nsh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \nsh \"docker push ${hubImgName}\"\nsh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1615425047286,["lixia@LAPTOP-FEL3RH8E",[[-1,167,"目"]],[168,168],[167,167]]],[1615425049713,["lixia@LAPTOP-FEL3RH8E",[[1,167,"mu"]],[167,167],[169,169]]],[1615425050518,["lixia@LAPTOP-FEL3RH8E",[[-1,167,"mu"]],[169,169],[167,167]]],[1615425052147,["lixia@LAPTOP-FEL3RH8E",[[1,167,"目"]],[167,167],[168,168]]],[1615425056859,["lixia@LAPTOP-FEL3RH8E",[[-1,161,"  "]],[163,163],[161,161]]],[1615425105525,["lixia@LAPTOP-FEL3RH8E",[[-1,704,"，"]],[705,705],[704,704]]],[1615425176796,["lixia@LAPTOP-FEL3RH8E",[[1,1594,"    "]],[1594,1594],[1598,1598]]],[1615425179023,["lixia@LAPTOP-FEL3RH8E",[[1,1682,"    "]],[1682,1682],[1686,1686]]],[1615425180968,["lixia@LAPTOP-FEL3RH8E",[[1,1722,"    "]],[1722,1722],[1726,1726]]],[1615425183793,["lixia@LAPTOP-FEL3RH8E",[[1,1214," "]],[1214,1214],[1215,1215]]],[1615425202637,["lixia@LAPTOP-FEL3RH8E",[[1,1974,"   "]],[1974,1974],[1977,1977]]],[1615425205858,["lixia@LAPTOP-FEL3RH8E",[[1,2083,"   "]],[2083,2083],[2086,2086]]],[1615425207558,["lixia@LAPTOP-FEL3RH8E",[[1,2117,"   "]],[2117,2117],[2120,2120]]],[1615425496090,["lixia@LAPTOP-FEL3RH8E",[[-1,192,"配置Do"],[-1,197,"ker镜像"]],[192,202],[192,193]]],[1615425496755,["lixia@LAPTOP-FEL3RH8E",[[-1,192,"c"],[1,193,"操作"]],[192,192],[194,194]]],[1615425497522,["lixia@LAPTOP-FEL3RH8E",[[1,194,"步骤"]],[194,194],[196,196]]],[1615425552982,["lixia@LAPTOP-FEL3RH8E",[[1,123,"\n"]],[122,122],[123,123]]],[1615425555791,["lixia@LAPTOP-FEL3RH8E",[[1,123,"### BEIJI"]],[123,123],[132,132]]],[1615425556740,["lixia@LAPTOP-FEL3RH8E",[[-1,127,"BEIJI"]],[132,132],[127,127]]],[1615425558888,["lixia@LAPTOP-FEL3RH8E",[[1,127,"背景信息"]],[127,127],[131,131]]],[1615425768634,["lixia@LAPTOP-FEL3RH8E",[[1,1345,"    "]],[1345,1345],[1349,1349]]],[1615425777622,["lixia@LAPTOP-FEL3RH8E",[[1,1984," "]],[1984,1984],[1985,1985]]],[1615425778968,["lixia@LAPTOP-FEL3RH8E",[[1,2094," "]],[2094,2094],[2095,2095]]],[1615425779528,["lixia@LAPTOP-FEL3RH8E",[[1,2129," "]],[2128,2128],[2129,2129]]],[1615425783317,["lixia@LAPTOP-FEL3RH8E",[[1,913,"。"]],[913,913],[914,914]]]],null,"lixia@LAPTOP-FEL3RH8E"],["c8e24bd7-53f2-4b57-8604-29257d42dabe",1619422683472,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 背景信息\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。\n\n### 操作步骤\n1. 获取Docker镜像仓库的信息。\n    \n    在项目的“制品库 > docker镜像”界面中，单击右上角的”查看docker镜像信息“，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。\n    \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。\n     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。\n    \n    在流水线的任务编辑界面中，添加Docker步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。\n    \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。\n     \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。\n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1619422679816,["lixia@LAPTOP-FEL3RH8E",[[-1,265,"”"]],[266,266],[265,265]]],[1619422680148,["lixia@LAPTOP-FEL3RH8E",[[1,265,"“"]],[265,265],[266,266]]],[1619422682335,["lixia@LAPTOP-FEL3RH8E",[[-1,278,"“"]],[279,279],[278,278]]],[1619422682664,["lixia@LAPTOP-FEL3RH8E",[[1,278,"”"]],[278,278],[279,279]]]],null,"lixia@LAPTOP-FEL3RH8E"],["01bc7b12-7d95-4eae-b314-98f5577b1294",1626076584587,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 背景信息\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。\n\n### 操作步骤\n1. 获取Docker镜像仓库的信息。\n    \n    在项目的“制品库 > docker镜像”界面中，单击右上角的“查看docker镜像信息”，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。\n    \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。\n     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。\n    \n    在流水线的任务编辑界面中，添加Docker步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。\n    \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。\n     \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。\n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1626076568453,["lixia@LAPTOP-FEL3RH8E",[[1,668,"“构建 > "]],[668,668],[674,674]]],[1626076575176,["lixia@LAPTOP-FEL3RH8E",[[1,680,"镜像构建”"]],[680,680],[685,685]]]],null,"lixia@LAPTOP-FEL3RH8E"],["698ee744-780d-468b-85dd-20b1018c4419",1627293374762,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 背景信息\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。\n\n### 操作步骤\n1. 获取Docker镜像仓库的信息。\n    \n    在项目的“制品库 > docker镜像”界面中，单击右上角的“查看docker镜像信息”，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。\n    \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。\n     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。\n    \n    在流水线的任务编辑界面中，添加“构建 > Docker镜像构建”步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。\n    \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。\n     \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。\n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1627293350130,["lixia@LAPTOP-FEL3RH8E",[[1,225,"                        "]],[225,225],[249,249]]],[1627293350535,["lixia@LAPTOP-FEL3RH8E",[[-1,249,"\n"]],[249,249],[249,249]]],[1627293353313,["lixia@LAPTOP-FEL3RH8E",[[1,333,"                          "]],[333,333],[359,359]]],[1627293353791,["lixia@LAPTOP-FEL3RH8E",[[-1,359,"\n"]],[359,359],[359,359]]],[1627293357822,["lixia@LAPTOP-FEL3RH8E",[[1,608,"                "]],[608,608],[624,624]]],[1627293358262,["lixia@LAPTOP-FEL3RH8E",[[-1,624,"\n"]],[624,624],[624,624]]],[1627293360895,["lixia@LAPTOP-FEL3RH8E",[[1,706,"                      "]],[706,706],[728,728]]],[1627293361843,["lixia@LAPTOP-FEL3RH8E",[[-1,728,"\n"]],[728,728],[728,728]]],[1627293364419,["lixia@LAPTOP-FEL3RH8E",[[1,809,"                        "]],[809,809],[833,833]]],[1627293364784,["lixia@LAPTOP-FEL3RH8E",[[-1,833,"\n"]],[833,833],[833,833]]],[1627293368366,["lixia@LAPTOP-FEL3RH8E",[[1,912,"                        "]],[912,912],[936,936]]],[1627293368806,["lixia@LAPTOP-FEL3RH8E",[[-1,936,"\n"]],[936,936],[936,936]]],[1627293372859,["lixia@LAPTOP-FEL3RH8E",[[1,1055,"          "]],[1055,1055],[1065,1065]]]],null,"lixia@LAPTOP-FEL3RH8E"],["6520914c-b6dd-410e-a7ec-6777d8f9bed5",1628500552842,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 背景信息\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。\n\n### 操作步骤\n1. 获取Docker镜像仓库的信息。                            \n    在项目的“制品库 > docker镜像”界面中，单击右上角的“查看docker镜像信息”，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。                              \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。                     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。                          \n    在流水线的任务编辑界面中，添加“构建 > Docker镜像构建”步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。                            \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。                             \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。          \n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1628500513818,["lixia@LAPTOP-FEL3RH8E",[[1,197,"\n"]],[195,195],[196,196]]],[1628500517238,["lixia@LAPTOP-FEL3RH8E",[[1,195,"       "]],[195,195],[202,202]]],[1628500534272,["lixia@LAPTOP-FEL3RH8E",[[1,203,"您可以将构建完成的软件包载"]],[203,203],[216,216]]],[1628500535473,["lixia@LAPTOP-FEL3RH8E",[[-1,215,"载"]],[216,216],[215,215]]],[1628500541180,["lixia@LAPTOP-FEL3RH8E",[[1,215,"再打包为D欧辰客人"]],[215,215],[224,224]]],[1628500542190,["lixia@LAPTOP-FEL3RH8E",[[-1,220,"欧辰客人"]],[224,224],[220,220]]],[1628500552559,["lixia@LAPTOP-FEL3RH8E",[[1,220,"ocker镜像，也可以直接将代码打包为"]],[220,220],[239,239]]],[1628500557955,["lixia@LAPTOP-FEL3RH8E",[[1,239,"Docker江西"]],[239,239],[247,247]]],[1628500558480,["lixia@LAPTOP-FEL3RH8E",[[-1,245,"江西"]],[247,247],[245,245]]],[1628500559733,["lixia@LAPTOP-FEL3RH8E",[[1,245,"镜像。"]],[245,245],[248,248]]],[1628500561525,["lixia@LAPTOP-FEL3RH8E",[[1,248,"   "]],[248,248],[251,251]]],[1628500641546,["lixia@LAPTOP-FEL3RH8E",[[1,247,"，用于K8s部署"]],[247,247],[255,255]]]],null,"lixia@LAPTOP-FEL3RH8E"],["1d5fdae7-50a1-4b06-a2b6-ae8371340fa7",1628751561594,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 背景信息\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 获取Docker镜像仓库的信息。                            \n    在项目的“制品库 > docker镜像”界面中，单击右上角的“查看docker镜像信息”，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。                              \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。                     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。                          \n    在流水线的任务编辑界面中，添加“构建 > Docker镜像构建”步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。                            \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。                             \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。          \n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1628751549163,["lixia@LAPTOP-FEL3RH8E",[[1,207,"Maven、Gradle、NPM\\"]],[207,207],[224,224]]],[1628751549252,["lixia@LAPTOP-FEL3RH8E",[[-1,223,"\\"],[1,224,"、"]],[224,224],[224,224]]],[1628751553043,["lixia@LAPTOP-FEL3RH8E",[[1,224,"Conan"]],[224,224],[229,229]]]],null,"lixia@LAPTOP-FEL3RH8E"],["602e6c33-f076-4147-940a-fea3e2369a6c",1629167495843,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 背景信息\nCloud Native提供Docker镜像仓库。Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle、NPM、Conan构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 获取Docker镜像仓库的信息。                            \n    在项目的“制品库 > docker镜像”界面中，单击右上角的“查看docker镜像信息”，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。                              \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">\n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。                     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">\n     \n3. 配置Docker步骤。                          \n    在流水线的任务编辑界面中，添加“构建 > Docker镜像构建”步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。                            \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。                             \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。          \n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n\n\n",[[1629167448755,["lixia@LAPTOP-FEL3RH8E",[[1,123,"\n"]],[121,121],[122,122]]],[1629167449249,["lixia@LAPTOP-FEL3RH8E",[[1,124,"\n"]],[122,122],[123,123]]],[1629167452995,["lixia@LAPTOP-FEL3RH8E",[[1,123,"### 前提条件"]],[123,123],[131,131]]],[1629167453273,["lixia@LAPTOP-FEL3RH8E",[[1,133,"\n"]],[131,131],[132,132]]],[1629167495111,["lixia@LAPTOP-FEL3RH8E",[[1,132,"* 构建的代码库中已上传Dockerfile文件。"]],[132,132],[157,157]]],[1629167495438,["lixia@LAPTOP-FEL3RH8E",[[1,158,"* \n"]],[157,157],[160,160]]],[1629167534441,["lixia@LAPTOP-FEL3RH8E",[[1,160,"已创建Docker仓库的授权类接入点（请参见"]],[160,160],[182,182]]],[1629167560404,["lixia@LAPTOP-FEL3RH8E",[[1,182,"[6.7.3 管理授权类接入点](6-7-3-管理授权类接入点)"]],[182,182],[214,214]]],[1629167566290,["lixia@LAPTOP-FEL3RH8E",[[-1,183,"6.7.3 "]],[183,189],[183,183]]],[1629167568340,["lixia@LAPTOP-FEL3RH8E",[[-1,194,"-"],[1,195,"."]],[194,195],[195,195]]],[1629167569544,["lixia@LAPTOP-FEL3RH8E",[[-1,196,"-"],[1,197,"."]],[196,197],[197,197]]],[1629167570726,["lixia@LAPTOP-FEL3RH8E",[[-1,198,"-"],[1,199," "]],[198,199],[199,199]]],[1629167573000,["lixia@LAPTOP-FEL3RH8E",[[1,207,".html"]],[207,207],[212,212]]],[1629167577930,["lixia@LAPTOP-FEL3RH8E",[[1,213,"，或者已获取"]],[213,213],[219,219]]],[1629167879540,["lixia@LAPTOP-FEL3RH8E",[[1,219,"Docker仓库的仓库地址、用户名密码、和"]],[219,219],[240,240]]],[1629167880612,["lixia@LAPTOP-FEL3RH8E",[[-1,239,"和"]],[240,240],[239,239]]],[1629167883838,["lixia@LAPTOP-FEL3RH8E",[[1,239,"仓库项目名称"]],[239,239],[245,245]]],[1629167918135,["lixia@LAPTOP-FEL3RH8E",[[1,245,"。"]],[245,245],[246,246]]],[1629167918899,["lixia@LAPTOP-FEL3RH8E",[[-1,245,"。"]],[246,246],[245,245]]],[1629167939354,["lixia@LAPTOP-FEL3RH8E",[[1,245,"，并且Docker仓库于"]],[245,245],[257,257]]],[1629167939874,["lixia@LAPTOP-FEL3RH8E",[[-1,256,"于"]],[257,257],[256,256]]],[1629167943962,["lixia@LAPTOP-FEL3RH8E",[[1,256,"与系统"]],[256,256],[259,259]]],[1629167946658,["lixia@LAPTOP-FEL3RH8E",[[-1,257,"系统"]],[259,259],[257,257]]],[1629167952073,["lixia@LAPTOP-FEL3RH8E",[[1,257,"本系统可互联互通。、"]],[257,257],[267,267]]],[1629167952895,["lixia@LAPTOP-FEL3RH8E",[[-1,266,"、"]],[267,267],[266,266]]],[1629168198107,["lixia@LAPTOP-FEL3RH8E",[[1,277,"\n"]],[277,277],[278,278]]],[1629168212499,["lixia@LAPTOP-FEL3RH8E",[[1,277,"您可以将Docker镜像构建按后"]],[277,277],[293,293]]],[1629168212937,["lixia@LAPTOP-FEL3RH8E",[[-1,291,"按后"]],[293,293],[291,291]]],[1629168227261,["lixia@LAPTOP-FEL3RH8E",[[1,291,"后的制品推送到Cloud Native系统的Docekr"]],[291,291],[319,319]]],[1629168228168,["lixia@LAPTOP-FEL3RH8E",[[-1,316,"ekr"]],[319,319],[316,316]]],[1629168254516,["lixia@LAPTOP-FEL3RH8E",[[1,316,"ker仓库，也可以推送到第三方Docker仓库。"]],[316,316],[340,340]]],[1629168262701,["lixia@LAPTOP-FEL3RH8E",[[-1,341,"Cloud Native提供Docker镜像仓库。"]],[353,366],[341,341]]],[1629168268933,["lixia@LAPTOP-FEL3RH8E",[[1,341,"Cloud Native的"]],[341,341],[354,354]]],[1629168274639,["lixia@LAPTOP-FEL3RH8E",[[1,340,"           "]],[340,340],[351,351]]],[1629168343434,["lixia@LAPTOP-FEL3RH8E",[[-1,503,"获取Docker镜像仓库的信息。                            \n    在项目的“制品库 > docker镜像”界面中，单击右上角的“查看docker镜像信息”，获取Docker仓库地址、仓库项目名称、用户名、密码等信息。                              \n      <img src=\"fig/流水线-docker-仓库.png\" style=\"zoom:50%\">"],[1,714,"在流水线任务中，添加“构建 > Gradle构建”步骤，设置步骤名称，选择gradle版本。"]],[503,714],[549,549]]],[1629168346635,["lixia@LAPTOP-FEL3RH8E",[[-1,519,"Gradle构建"],[1,527,"D"]],[519,527],[520,520]]],[1629168347763,["lixia@LAPTOP-FEL3RH8E",[[1,520,"ocker"]],[520,520],[525,525]]],[1629168355103,["lixia@LAPTOP-FEL3RH8E",[[-1,528,"，"],[1,529,"。"]],[528,528],[529,529]]],[1629168355674,["lixia@LAPTOP-FEL3RH8E",[[1,529,"\n"]],[529,529],[530,530]]],[1629168358123,["lixia@LAPTOP-FEL3RH8E",[[1,530,"2. "]],[530,530],[533,533]]],[1629168362460,["lixia@LAPTOP-FEL3RH8E",[[1,525,"镜像"]],[525,525],[527,527]]],[1629168383085,["lixia@LAPTOP-FEL3RH8E",[[1,535,"根据下表的描述，"]],[535,535],[543,543]]],[1629168387824,["lixia@LAPTOP-FEL3RH8E",[[-1,543,"设置步骤名称，选择gradle版本"],[1,560,"配置"]],[543,543],[545,545]]],[1629168399404,["lixia@LAPTOP-FEL3RH8E",[[-1,543,"配置"]],[545,545],[543,543]]],[1629168405372,["lixia@LAPTOP-FEL3RH8E",[[1,543,"设置Docker镜像"]],[543,543],[553,553]]],[1629168415372,["lixia@LAPTOP-FEL3RH8E",[[1,527,"构建"]],[527,527],[529,529]]],[1629168426043,["lixia@LAPTOP-FEL3RH8E",[[1,555,"构建步骤的参数，单击“保存”"]],[555,555],[569,569]]],[1629168429495,["lixia@LAPTOP-FEL3RH8E",[[1,571,"3. \n"]],[570,570],[574,574]]],[1629168437840,["lixia@LAPTOP-FEL3RH8E",[[1,570,"      "]],[570,570],[576,576]]],[1629168438287,["lixia@LAPTOP-FEL3RH8E",[[1,581,"3. \n"]],[576,576],[580,580]]],[1629168439015,["lixia@LAPTOP-FEL3RH8E",[[-1,577,"3. "]],[580,580],[577,577]]],[1629168444526,["lixia@LAPTOP-FEL3RH8E",[[1,577,"   <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">   "]],[577,577],[633,633]]],[1629168444866,["lixia@LAPTOP-FEL3RH8E",[[1,634," "]],[634,634],[635,635]]],[1629168445249,["lixia@LAPTOP-FEL3RH8E",[[1,636,"   \n"]],[635,635],[639,639]]],[1629168465049,["lixia@LAPTOP-FEL3RH8E",[[1,914,"<table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取代码部署文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为部署文件。</li><li>其他路径：暂不支持，后续版本支持。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示部署文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n  <tr>\n    <td>主机信息</td>\n    <td>表示部署到哪个主机。主机信息来源于“项目设置 > 接入点设置 > <a href=\"6.7.2 管理主机.html\">主机管理</a>”中的添加的主机。</td>\n  </tr>\n<tr>\n    <td>主机文件部署目录</td>\n    <td>表示将部署文件上传到主机的哪个目录。该目录为绝对路径，且主机信息中的用户对该目录必须具有可写权限。<p>勾选“清空文件”后，系统会自动将主机对应目录下的文件都删除。</p></td>\n</tr>\n<tr>\n    <td>失败后继续运行</td>\n    <td>表示当前步骤执行失败后，继续执行后续的步骤。</td>\n</tr>\n<tr>\n    <td>命令</td>\n    <td>输入在主机上执行的软件部署命令，执行部署。</td>\n</tr>\n</table>"]],[914,914],[1858,1858]]],[1629168624719,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1858,"\n"]],[633,633],[1859,1859]]],[1629168624719,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1858,"\n"]],[1859,1859],[633,633]]],[1629168619958,["lixia@LAPTOP-FEL3RH8E",[[-1,1041,"部署文件来源 "],[1,1048,"工具"]],[1041,1041],[1043,1043]]],[1629168620609,["lixia@LAPTOP-FEL3RH8E",[[1,1043,"版本"]],[1043,1043],[1045,1045]]],[1629168684717,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1855,"\n"]],[633,633],[1856,1856]]],[1629168684717,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1855,"\n"]],[1856,1856],[633,633]]],[1629168634416,["lixia@LAPTOP-FEL3RH8E",[[-1,1059,"<ul><li>代码库：从执行机的“部署文件相对路径”中获取代码部署文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为部署文件。</li><li>其他路径：暂不支持，后续版本支持。</li></ul>"],[1,1167,"选择"]],[1059,1059],[1061,1061]]],[1629168635233,["lixia@LAPTOP-FEL3RH8E",[[1,1061,"工具"]],[1061,1061],[1063,1063]]],[1629168637140,["lixia@LAPTOP-FEL3RH8E",[[-1,1061,"工具"]],[1063,1063],[1061,1061]]],[1629168641006,["lixia@LAPTOP-FEL3RH8E",[[1,1061,"构建工具的版本，"]],[1061,1061],[1069,1069]]],[1629168642022,["lixia@LAPTOP-FEL3RH8E",[[-1,1068,"，"]],[1069,1069],[1068,1068]]],[1629168642861,["lixia@LAPTOP-FEL3RH8E",[[1,1068,"。"]],[1068,1068],[1069,1069]]],[1629168649481,["lixia@LAPTOP-FEL3RH8E",[[-1,1094,"部署文件相对路径"],[1,1102,"镜像"]],[1094,1094],[1096,1096]]],[1629168650375,["lixia@LAPTOP-FEL3RH8E",[[1,1096,"名称"]],[1096,1096],[1098,1098]]],[1629168864750,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1753,"\n"]],[633,633],[1754,1754]]],[1629168864750,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1753,"\n"]],[1754,1754],[633,633]]],[1629168809456,["lixia@LAPTOP-FEL3RH8E",[[-1,1112,"“部署文件来源”选择“代码库”时，本参数有效。<p>表示部署文件相对于文件根目录的相对路径。最多支持128个字符。</p>"],[1,1173,"可hi"]],[1112,1112],[1115,1115]]],[1629168810453,["lixia@LAPTOP-FEL3RH8E",[[-1,1112,"可hi"]],[1115,1115],[1112,1112]]],[1629168815948,["lixia@LAPTOP-FEL3RH8E",[[1,1112,"可以设置"]],[1112,1112],[1116,1116]]],[1629168819469,["lixia@LAPTOP-FEL3RH8E",[[-1,1114,"设置"]],[1116,1116],[1114,1114]]],[1629168840031,["lixia@LAPTOP-FEL3RH8E",[[1,1114,"选择已配置的字符串类型参数，或者单击对话框，"]],[1114,1114],[1136,1136]]],[1629168841312,["lixia@LAPTOP-FEL3RH8E",[[-1,1135,"，"]],[1136,1136],[1135,1135]]],[1629168847850,["lixia@LAPTOP-FEL3RH8E",[[1,1135,"，直接输入惊醒"]],[1135,1135],[1142,1142]]],[1629168849100,["lixia@LAPTOP-FEL3RH8E",[[-1,1140,"惊醒"]],[1142,1142],[1140,1140]]],[1629168852300,["lixia@LAPTOP-FEL3RH8E",[[1,1140,"镜像的名称"]],[1140,1140],[1145,1145]]],[1629168856063,["lixia@LAPTOP-FEL3RH8E",[[1,1140,"自定义的"]],[1140,1140],[1144,1144]]],[1629168858500,["lixia@LAPTOP-FEL3RH8E",[[-1,1146,"的"]],[1147,1147],[1146,1146]]],[1629168860741,["lixia@LAPTOP-FEL3RH8E",[[1,1148,"。"]],[1148,1148],[1149,1149]]],[1629168882408,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1729,"\n"]],[633,633],[1730,1730]]],[1629168882408,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1729,"\n"]],[1730,1730],[633,633]]],[1629168880000,["lixia@LAPTOP-FEL3RH8E",[[1,1149,"字符串类型参数的配置请参见"]],[1149,1149],[1162,1162]]],[1629168942429,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1742,"\n"]],[633,633],[1743,1743]]],[1629168942429,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1742,"\n"]],[1743,1743],[633,633]]],[1629168889388,["lixia@LAPTOP-FEL3RH8E",[[1,1162,"[12.6.1 设置流水线参数](12-6-1-设置流水线参数)"]],[1162,1162],[1194,1194]]],[1629168892069,["lixia@LAPTOP-FEL3RH8E",[[-1,1163,"12.6.1 "]],[1163,1170],[1163,1163]]],[1629168894601,["lixia@LAPTOP-FEL3RH8E",[[-1,1174,"-"],[1,1175,"."]],[1174,1175],[1175,1175]]],[1629168895690,["lixia@LAPTOP-FEL3RH8E",[[1,1177,"."]],[1177,1177],[1178,1178]]],[1629168897337,["lixia@LAPTOP-FEL3RH8E",[[-1,1176,"-"]],[1176,1177],[1176,1176]]],[1629168898756,["lixia@LAPTOP-FEL3RH8E",[[-1,1178,"-"],[1,1179," "]],[1178,1179],[1179,1179]]],[1629168903125,["lixia@LAPTOP-FEL3RH8E",[[1,1186,".html"]],[1186,1186],[1191,1191]]],[1629168906626,["lixia@LAPTOP-FEL3RH8E",[[-1,1157,"配置"]],[1159,1159],[1157,1157]]],[1629168907496,["lixia@LAPTOP-FEL3RH8E",[[1,1157,"shezhi"]],[1157,1157],[1163,1163]]],[1629168908578,["lixia@LAPTOP-FEL3RH8E",[[-1,1157,"shezhi"]],[1163,1163],[1157,1157]]],[1629168910279,["lixia@LAPTOP-FEL3RH8E",[[1,1157,"设置"]],[1157,1157],[1159,1159]]],[1629168912460,["lixia@LAPTOP-FEL3RH8E",[[-1,1117,"配置"]],[1119,1119],[1117,1117]]],[1629168913227,["lixia@LAPTOP-FEL3RH8E",[[1,1117,"设置"]],[1117,1117],[1119,1119]]],[1629168915039,["lixia@LAPTOP-FEL3RH8E",[[1,1192,"。"]],[1192,1192],[1193,1193]]],[1629169002429,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1773,"\n"]],[633,633],[1774,1774]]],[1629169002429,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1773,"\n"]],[1774,1774],[633,633]]],[1629168960992,["lixia@LAPTOP-FEL3RH8E",[[-1,1218,"制品库文件仓库文件版本"],[1,1229,"镜像"]],[1218,1218],[1220,1220]]],[1629168962456,["lixia@LAPTOP-FEL3RH8E",[[1,1220,"标签"]],[1220,1220],[1222,1222]]],[1629168980172,["lixia@LAPTOP-FEL3RH8E",[[-1,1236,"“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。"],[1,1356,"可以"]],[1236,1236],[1238,1238]]],[1629169000130,["lixia@LAPTOP-FEL3RH8E",[[1,1238,"选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见[设置流水线参数](12.6.1 设置流水线参数.html)。"]],[1238,1238],[1321,1321]]],[1629169002036,["lixia@LAPTOP-FEL3RH8E",[[1,1280,"、"]],[1280,1280],[1281,1281]]],[1629169062449,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1732,"\n"]],[633,633],[1733,1733]]],[1629169062449,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1732,"\n"]],[1733,1733],[633,633]]],[1629169005442,["lixia@LAPTOP-FEL3RH8E",[[1,1281,"自增长"]],[1281,1281],[1284,1284]]],[1629169013952,["lixia@LAPTOP-FEL3RH8E",[[-1,1356,"主机信息"]],[1356,1356],[1356,1356]]],[1629169015654,["lixia@LAPTOP-FEL3RH8E",[[1,1356,"工作目录"]],[1356,1356],[1360,1360]]],[1629169122474,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1735,"\n"]],[633,633],[1736,1736]]],[1629169122474,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1735,"\n"]],[1736,1736],[633,633]]],[1629169112606,["lixia@LAPTOP-FEL3RH8E",[[-1,1374,"表示部署到哪个主机。主机信息来源于“项目设置 > 接入点设置 > <a href=\"6.7.2 管理主机.html\">主机管理</a>”中的添加的主机"],[1,1449,"在此目录下执行**docker build**"]],[1374,1450],[1398,1398]]],[1629169115499,["lixia@LAPTOP-FEL3RH8E",[[-1,1374,"在此目录下"]],[1374,1379],[1374,1374]]],[1629169118664,["lixia@LAPTOP-FEL3RH8E",[[1,1392,"的目录"]],[1392,1392],[1395,1395]]],[1629169182454,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1681,"\n"]],[633,633],[1682,1682]]],[1629169182454,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1681,"\n"]],[1682,1682],[633,633]]],[1629169133980,["lixia@LAPTOP-FEL3RH8E",[[-1,1423,"主机文件部署目录"],[1,1431,"D"]],[1423,1431],[1424,1424]]],[1629169138607,["lixia@LAPTOP-FEL3RH8E",[[1,1424,"ockerfile路径"]],[1424,1424],[1435,1435]]],[1629169150401,["lixia@LAPTOP-FEL3RH8E",[[-1,1449,"表示将部署文件上传到主机的哪个目录。该目录为绝对路径，且主机信息中的用户对该目录必须具有可写权限。<p>勾选“清空文件”后，系统会自动将主机对应目录下的文件都删除。</p>"],[1,1535,"D"]],[1449,1535],[1450,1450]]],[1629169162967,["lixia@LAPTOP-FEL3RH8E",[[1,1450,"ockefile相对于“工作项"]],[1450,1450],[1465,1465]]],[1629169164054,["lixia@LAPTOP-FEL3RH8E",[[-1,1464,"项"]],[1465,1465],[1464,1464]]],[1629169167883,["lixia@LAPTOP-FEL3RH8E",[[1,1464,"目录”的路径。"]],[1464,1464],[1471,1471]]],[1629169173911,["lixia@LAPTOP-FEL3RH8E",[[-1,1496,"失败后继续运行"],[1,1503,"推送"]],[1496,1496],[1498,1498]]],[1629169175860,["lixia@LAPTOP-FEL3RH8E",[[1,1498,"制品库"]],[1498,1498],[1501,1501]]],[1629169180519,["lixia@LAPTOP-FEL3RH8E",[[-1,1515,"表示当前步骤执行失败后，继续执行后续的步骤。"]],[1515,1537],[1515,1515]]],[1629169242454,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1597,"\n"]],[633,633],[1598,1598]]],[1629169242454,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1597,"\n"]],[1598,1598],[633,633]]],[1629169186051,["lixia@LAPTOP-FEL3RH8E",[[1,1515,"可以选择"]],[1515,1515],[1519,1519]]],[1629169189669,["lixia@LAPTOP-FEL3RH8E",[[-1,1515,"可以选择"]],[1519,1519],[1515,1515]]],[1629169194785,["lixia@LAPTOP-FEL3RH8E",[[1,1516,"<"]],[1515,1515],[1516,1516]]],[1629169197502,["lixia@LAPTOP-FEL3RH8E",[[1,1516,"ul>>"]],[1516,1516],[1520,1520]]],[1629169198400,["lixia@LAPTOP-FEL3RH8E",[[-1,1519,">"]],[1520,1520],[1519,1519]]],[1629169199043,["lixia@LAPTOP-FEL3RH8E",[[1,1520,"<"]],[1519,1519],[1520,1520]]],[1629169199789,["lixia@LAPTOP-FEL3RH8E",[[1,1520,";"]],[1520,1520],[1521,1521]]],[1629169200189,["lixia@LAPTOP-FEL3RH8E",[[-1,1520,";"]],[1521,1521],[1520,1520]]],[1629169206978,["lixia@LAPTOP-FEL3RH8E",[[1,1520,"li>当前项目Docker、"]],[1520,1520],[1534,1534]]],[1629169207631,["lixia@LAPTOP-FEL3RH8E",[[-1,1533,"、"]],[1534,1534],[1533,1533]]],[1629169211980,["lixia@LAPTOP-FEL3RH8E",[[1,1533,"仓库："]],[1533,1533],[1536,1536]]],[1629169214835,["lixia@LAPTOP-FEL3RH8E",[[1,1523,"**"],[1,1535,"**"]],[1523,1535],[1523,1539]]],[1629169231774,["lixia@LAPTOP-FEL3RH8E",[[1,1540,"将构建按后"]],[1540,1540],[1545,1545]]],[1629169232198,["lixia@LAPTOP-FEL3RH8E",[[-1,1543,"按后"]],[1545,1545],[1543,1543]]],[1629169236633,["lixia@LAPTOP-FEL3RH8E",[[1,1543,"后的镜像推送到"]],[1543,1543],[1550,1550]]],[1629169240387,["lixia@LAPTOP-FEL3RH8E",[[-1,1540,"将构建后的镜像推送到"]],[1550,1550],[1540,1540]]],[1629169302461,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1622,"\n"]],[633,633],[1623,1623]]],[1629169302461,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1622,"\n"]],[1623,1623],[633,633]]],[1629169265299,["lixia@LAPTOP-FEL3RH8E",[[1,1540,"仓库在本项目的“制品库 > docker镜像”中。"]],[1540,1540],[1565,1565]]],[1629169267431,["lixia@LAPTOP-FEL3RH8E",[[1,1566,"<"]],[1565,1565],[1566,1566]]],[1629169269774,["lixia@LAPTOP-FEL3RH8E",[[1,1566,"/li>"]],[1566,1566],[1570,1570]]],[1629169273709,["lixia@LAPTOP-FEL3RH8E",[[1,1571,"li>**当前项目Docker仓库**：仓库在本项目的“制品库 > docker镜像”中。</li><"]],[1570,1570],[1621,1621]]],[1629169275853,["lixia@LAPTOP-FEL3RH8E",[[1,1570,"\n    "]],[1570,1570],[1575,1575]]],[1629169277467,["lixia@LAPTOP-FEL3RH8E",[[1,1626,"\n    "]],[1626,1626],[1631,1631]]],[1629169281496,["lixia@LAPTOP-FEL3RH8E",[[-1,1581,"当前项目Docker仓库"]],[1582,1593],[1581,1581]]],[1629169295294,["lixia@LAPTOP-FEL3RH8E",[[1,1581,"AMPqita"]],[1581,1581],[1588,1588]]],[1629169296344,["lixia@LAPTOP-FEL3RH8E",[[-1,1584,"qita"]],[1588,1588],[1584,1584]]],[1629169297445,["lixia@LAPTOP-FEL3RH8E",[[1,1584,"其他"]],[1584,1584],[1586,1586]]],[1629169298078,["lixia@LAPTOP-FEL3RH8E",[[-1,1585,"他"]],[1586,1586],[1585,1585]]],[1629169300985,["lixia@LAPTOP-FEL3RH8E",[[1,1585,"它项目或"]],[1585,1585],[1589,1589]]],[1629169337101,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1709,"\n"]],[633,633],[1710,1710]]],[1629169337101,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1709,"\n"]],[1710,1710],[633,633]]],[1629169305219,["lixia@LAPTOP-FEL3RH8E",[[1,1589,"第三方Docker仓库"]],[1589,1589],[1600,1600]]],[1629169316205,["lixia@LAPTOP-FEL3RH8E",[[-1,1603,"仓库在本项目的“制品库 > docker镜像”中。"],[1,1628,"可以"]],[1603,1603],[1605,1605]]],[1629169324837,["lixia@LAPTOP-FEL3RH8E",[[1,1605,"选择已配置的C"]],[1605,1605],[1612,1612]]],[1629169326131,["lixia@LAPTOP-FEL3RH8E",[[-1,1611,"C"]],[1612,1612],[1611,1611]]],[1629169333621,["lixia@LAPTOP-FEL3RH8E",[[1,1611,"Docker类"]],[1611,1611],[1618,1618]]],[1629169397114,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1710,"\n"]],[633,633],[1711,1711]]],[1629169397114,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1710,"\n"]],[1711,1711],[633,633]]],[1629169347087,["lixia@LAPTOP-FEL3RH8E",[[1,1618,"[6.7.3 管理授权类接入点](6-7-3-管理授权类接入点)"]],[1618,1618],[1650,1650]]],[1629169350481,["lixia@LAPTOP-FEL3RH8E",[[-1,1619,"6.7.3 "]],[1619,1624],[1619,1619]]],[1629169353879,["lixia@LAPTOP-FEL3RH8E",[[-1,1630,"-"],[1,1631,"."]],[1630,1631],[1631,1631]]],[1629169355241,["lixia@LAPTOP-FEL3RH8E",[[-1,1632,"-"],[1,1633,"."]],[1632,1633],[1633,1633]]],[1629169356603,["lixia@LAPTOP-FEL3RH8E",[[-1,1634,"-"],[1,1635," "]],[1634,1635],[1635,1635]]],[1629169360081,["lixia@LAPTOP-FEL3RH8E",[[1,1643,".html"]],[1643,1643],[1648,1648]]],[1629169378395,["lixia@LAPTOP-FEL3RH8E",[[1,1649,"，或者单击“新建”创建"]],[1649,1649],[1660,1660]]],[1629169385142,["lixia@LAPTOP-FEL3RH8E",[[-1,1656,"建"]],[1657,1657],[1656,1656]]],[1629169386387,["lixia@LAPTOP-FEL3RH8E",[[1,1656,"曾"]],[1656,1656],[1657,1657]]],[1629169387043,["lixia@LAPTOP-FEL3RH8E",[[-1,1656,"曾"]],[1657,1657],[1656,1656]]],[1629169388357,["lixia@LAPTOP-FEL3RH8E",[[1,1656,"赠"]],[1656,1656],[1657,1657]]],[1629169389066,["lixia@LAPTOP-FEL3RH8E",[[-1,1656,"赠"]],[1657,1657],[1656,1656]]],[1629169390717,["lixia@LAPTOP-FEL3RH8E",[[1,1656,"增"]],[1656,1656],[1657,1657]]],[1629169396775,["lixia@LAPTOP-FEL3RH8E",[[1,1660,"新的Docker"]],[1660,1660],[1668,1668]]],[1629169457125,[null,[[-1,633,"\n 3"],[1,636,"  \n"],[1,640,"3"],[-1,913,"\n"],[1,1760,"\n"]],[633,633],[1761,1761]]],[1629169457125,[null,[[1,633,"\n 3"],[-1,633,"  \n"],[-1,640,"3"],[1,914,"\n"],[-1,1760,"\n"]],[1761,1761],[633,633]]],[1629169399536,["lixia@LAPTOP-FEL3RH8E",[[1,1668,"仓库，"]],[1668,1668],[1671,1671]]],[1629169401124,["lixia@LAPTOP-FEL3RH8E",[[-1,1670,"，"]],[1671,1671],[1670,1670]]],[1629169410320,["lixia@LAPTOP-FEL3RH8E",[[1,1670,"。然后设置“仓库项目名称”。"]],[1670,1670],[1684,1684]]],[1629169443808,["lixia@LAPTOP-FEL3RH8E",[[-1,1706,"<tr>\n    <td>命令</td>\n    <td>输入在主机上执行的软件部署命令，执行部署。</td>\n</tr>"]],[1706,1767],[1706,1706]]],[1629169444392,["lixia@LAPTOP-FEL3RH8E",[[-1,1706,"\n"]],[1706,1706],[1705,1705]]],[1629169448045,["lixia@LAPTOP-FEL3RH8E",[[-1,1715,"3. 配置Docker步骤。                          \n    在流水线的任务编辑界面中，添加“构建 > Docker镜像构建”步骤，设置步骤的名称，在命令框中输入要执行的Docker命令，然后单击“保存”。                            \n    <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">\n    \n4. 配置Docker命令。                             \n     Docker常用构建命令如下所示。其它Docker命令请参见[Docker官方文档](https://docs.docker.com/reference/#command-line-interfaces-clis)。          \n```\n    # 命令——自定义Docker镜像的名称\n    def <自定义的镜像名称> = \"<仓库地址>/<仓库项目名称>/pretest-amp-test-serve-api:lastest\"\n    # 举例——自定义Docker镜像的名称\n    def hubImgName = \"prod-hub.cloudnative.huaxiacloud.com/amppingtaiceshizixitong0dd/pretest-amp-test-serve-api:lastest\"\n\n    # 命令——使用指定的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n     sh docker build -f <要使用的Dockerfile路径> -t ${<镜像名称>} .\"\n    # 举例——使用“DockerFile_testapi_amp”目录中的Dockerfile打包镜像，并且将镜像名称命名为上面定义的名称\n    sh \"docker build -f DockerFile_testapi_amp -t ${hubImgName} .\"\n    # 命令——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{<定义的授权参数名称>}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} <docker镜像仓库地址>\"                     \n    sh \"docker push ${<定义的docker镜像名称>}\"\n    sh \"docker rmi -f ${<定义的docker镜像名称>}\"               \n } \n    # 举例——登录到某个镜像仓库，并且将镜像推送到仓库；登录镜像仓库时，使用的用户名和密码引用授权参数\n    withCredentials([usernamePassword(credentialsId: \"@{docker-auth}\", passwordVariable: 'password', usernameVariable: 'username')]) {\n    sh \"docker login -u ${username} -p ${password} prod-hub.cloudnative.huaxiacloud.com\"                     \n    sh \"docker push ${hubImgName}\"\n    sh \"docker rmi -f ${hubImgName}\"               \n } \n```\n"]],[1715,3361],[1715,1715]]],[1629169456016,["lixia@LAPTOP-FEL3RH8E",[[1,157,"Docker"]],[157,157],[163,163]]],[1629169476622,[null,[[-1,639,"\n 3"],[1,642,"  \n"],[1,646,"3"],[-1,919,"\n"],[-1,1720,"3"],[1,1721,"\n\n"]],[639,639],[1723,1723]]],[1629169476622,[null,[[1,639,"\n 3"],[-1,639,"  \n"],[-1,646,"3"],[1,920,"\n"],[1,1720,"3"],[-1,1720,"\n\n"]],[1723,1723],[639,639]]],[1629169473256,["lixia@LAPTOP-FEL3RH8E",[[1,163,"file的信息请参见"]],[163,163],[173,173]]],[1629169485771,[null,[[-1,649,"\n 3"],[1,652,"  \n"],[1,656,"3"],[-1,929,"\n"],[-1,1730,"3"],[1,1731,"\n\n"]],[649,649],[1733,1733]]],[1629169485771,[null,[[1,649,"\n 3"],[-1,649,"  \n"],[-1,656,"3"],[1,930,"\n"],[1,1730,"3"],[-1,1730,"\n\n"]],[1733,1733],[649,649]]],[1629169484947,["lixia@LAPTOP-FEL3RH8E",[[1,173,"[Docker官网](https://www.docker.org.cn/)。"]],[173,173],[212,212]]],[1629169573652,[null,[[-1,688,"\n 3"],[1,691,"  \n"],[1,695,"3"],[-1,968,"\n"],[-1,1769,"3"],[1,1770,"\n\n"]],[688,688],[1772,1772]]],[1629169573652,[null,[[1,688,"\n 3"],[-1,688,"  \n"],[-1,695,"3"],[1,969,"\n"],[1,1769,"3"],[-1,1769,"\n\n"]],[1772,1772],[688,688]]],[1629169562822,["lixia@LAPTOP-FEL3RH8E",[[-1,695,"3. \n      \n2. （可选）建议执行：创建用户名密码类型的授权参数，保存Docker仓库的登录信息。\n  1. 进入流水线编辑界面，单击“授权参数”页签。\n  2. 在授权参数列表界面右上方，单击“新建参数”。\n  3. 在“新建授权参数”对话框中，自定义“参数名称”，设置“授权类型”为“用户名密码”，然后在用户名和密码参数中输入Docker仓库的登录信息，单击“确定”。                     \n     <img src=\"fig/流水线-docker-参数.png\" style=\"zoom:50%\">"]],[695,963],[695,695]]],[1629169564046,["lixia@LAPTOP-FEL3RH8E",[[-1,695,"\n"]],[695,695],[695,695]]],[1629169565658,["lixia@LAPTOP-FEL3RH8E",[[-1,694,"\n"]],[694,694],[694,694]]],[1629169566946,["lixia@LAPTOP-FEL3RH8E",[[-1,698," "]],[694,694],[694,694]]],[1629169567471,["lixia@LAPTOP-FEL3RH8E",[[-1,697," "]],[694,694],[694,694]]],[1629169567671,["lixia@LAPTOP-FEL3RH8E",[[-1,696," "]],[694,694],[694,694]]],[1629169568035,["lixia@LAPTOP-FEL3RH8E",[[-1,695," "]],[694,694],[694,694]]],[1629169568312,["lixia@LAPTOP-FEL3RH8E",[[-1,694," "]],[694,694],[694,694]]],[1629169570441,["lixia@LAPTOP-FEL3RH8E",[[1,690,"     "]],[690,690],[695,695]]],[1629171556600,[null,[[-1,688,"\n"],[1,689," "],[-1,695,"3"],[1,696,"\n"],[-1,1499,"3"],[1,1500,"\n\n"]],[688,688],[1502,1502]]],[1629171556600,[null,[[1,688,"\n"],[-1,688," "],[1,695,"3"],[-1,695,"\n"],[1,1499,"3"],[-1,1499,"\n\n"]],[1502,1502],[688,688]]],[1629171511935,["lixia@LAPTOP-FEL3RH8E",[[1,1434,"<a href=\"6.7.2 管理主机.html\">主机管理</a>"]],[1434,1434],[1468,1468]]],[1629171518832,["lixia@LAPTOP-FEL3RH8E",[[-1,1447,"2 管理主机"],[1,1453,"3 管理授权类接入点"]],[1443,1458],[1462,1462]]],[1629171523355,["lixia@LAPTOP-FEL3RH8E",[[-1,1464,"主机"],[-1,1468,"<"],[1,1469,"授权类接入点"]],[1464,1469],[1472,1472]]],[1629171524998,["lixia@LAPTOP-FEL3RH8E",[[1,1472,"<"]],[1472,1472],[1473,1473]]],[1629171529290,["lixia@LAPTOP-FEL3RH8E",[[-1,1403,"[管理授权类接入点](6.7.3 管理授权类接入点.html)"]],[1403,1434],[1403,1403]]],[1629171542726,["lixia@LAPTOP-FEL3RH8E",[[1,977,"<a href=\"6.7.3 管理授权类接入点.html\">管理授权类接入点</a>"]],[977,977],[1019,1019]]],[1629171548901,["lixia@LAPTOP-FEL3RH8E",[[-1,986,"6.7.3 管理授权类接入点"],[1,1000,"12.6.1 设置流水线参数"]],[986,1005],[1005,1005]]],[1629171553396,["lixia@LAPTOP-FEL3RH8E",[[-1,1007,"管理授权类接入点"],[1,1015,"设置流水线参数"]],[1007,1015],[1014,1014]]],[1629171555977,["lixia@LAPTOP-FEL3RH8E",[[-1,947,"[设置流水线参数](12.6.1 设置流水线参数.html)"]],[947,977],[947,947]]],[1629171562896,[null,[[-1,688,"\n"],[1,689," "],[-1,695,"3"],[1,696,"\n"],[-1,1521,"3"],[1,1522,"\n\n"]],[688,688],[1524,1524]]],[1629171562896,[null,[[1,688,"\n"],[-1,688," "],[1,695,"3"],[-1,695,"\n"],[1,1521,"3"],[-1,1521,"\n\n"]],[1524,1524],[688,688]]],[1629171561806,["lixia@LAPTOP-FEL3RH8E",[[-1,1090,"[设置流水线参数]("],[1,1100,"<a href=\""],[-1,1119,")"],[1,1120,"\">设置流水线参数</a>"]],[1090,1120],[1131,1131]]]],null,"lixia@LAPTOP-FEL3RH8E"],["980abc5a-744f-4bdd-be76-6ecc4f175c6f",1629172148776,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 前提条件\n* 构建的代码库中已上传Dockerfile文件。Dockerfile的信息请参见[Docker官网](https://www.docker.org.cn/)。\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)，或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle、NPM、Conan构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > Docker镜像构建”步骤。\n2. 根据下表的描述，设置Docker镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>工具版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>工作目录</td>\n    <td>执行**docker build**的目录。</td>\n  </tr>\n<tr>\n    <td>Dockerfile路径</td>\n    <td>Dockefile相对于“工作目录”的路径。</td>\n</tr>\n<tr>\n    <td>推送制品库</td>\n    <td><ul><li>**当前项目Docker仓库**：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li>**AMP其它项目或第三方Docker仓库**：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">管理授权类接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n\n",[[1629172141943,["lixia@LAPTOP-FEL3RH8E",[[-1,1455,"管理"]],[1457,1457],[1455,1455]]],[1629172146421,["lixia@LAPTOP-FEL3RH8E",[[-1,1457,"类"]],[1458,1458],[1457,1457]]],[1629183453606,["lixia@LAPTOP-FEL3RH8E",[[1,268,"）"]],[268,268],[269,269]]]],null,"lixia@LAPTOP-FEL3RH8E"],["ffa2ad14-2376-4c4f-a60a-f8b2c7df07e3",1629185087235,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 前提条件\n* 构建的代码库中已上传Dockerfile文件。Dockerfile的信息请参见[Docker官网](https://www.docker.org.cn/)。\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle、NPM、Conan构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > Docker镜像构建”步骤。\n2. 根据下表的描述，设置Docker镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>工具版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>工作目录</td>\n    <td>执行**docker build**的目录。</td>\n  </tr>\n<tr>\n    <td>Dockerfile路径</td>\n    <td>Dockefile相对于“工作目录”的路径。</td>\n</tr>\n<tr>\n    <td>推送制品库</td>\n    <td><ul><li>**当前项目Docker仓库**：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li>**AMP其它项目或第三方Docker仓库**：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n\n",[[1629185066702,["lixia@LAPTOP-FEL3RH8E",[[-1,1331,"**"],[1,1333,"《"]],[1331,1331],[1332,1332]]],[1629185067642,["lixia@LAPTOP-FEL3RH8E",[[-1,1331,"《"]],[1332,1332],[1331,1331]]],[1629185070635,["lixia@LAPTOP-FEL3RH8E",[[1,1331,"<b>"]],[1331,1331],[1334,1334]]],[1629185073894,["lixia@LAPTOP-FEL3RH8E",[[-1,1346,"**"],[1,1348,"<"]],[1346,1348],[1347,1347]]],[1629185076387,["lixia@LAPTOP-FEL3RH8E",[[1,1347,"/b>"]],[1347,1347],[1350,1350]]],[1629185081356,["lixia@LAPTOP-FEL3RH8E",[[-1,1390,"**"],[1,1392,"<b>"]],[1390,1392],[1393,1393]]],[1629185082934,["lixia@LAPTOP-FEL3RH8E",[[-1,1412,"**"],[1,1414,"<b>"]],[1412,1414],[1415,1415]]],[1629185084949,["lixia@LAPTOP-FEL3RH8E",[[1,1413,"、"]],[1413,1413],[1414,1414]]],[1629185085982,["lixia@LAPTOP-FEL3RH8E",[[-1,1413,"、"]],[1414,1414],[1413,1413]]],[1629185086350,["lixia@LAPTOP-FEL3RH8E",[[1,1413,"/"]],[1413,1413],[1414,1414]]]],null,"lixia@LAPTOP-FEL3RH8E"],["01c72604-c5c3-45b4-874f-059b98d093d8",1629249479892,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 前提条件\n* 构建的代码库中已上传Dockerfile文件。Dockerfile的信息请参见[Docker官网](https://www.docker.org.cn/)。\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle、NPM、Conan构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > Docker镜像构建”步骤。\n2. 根据下表的描述，设置Docker镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>工具版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>工作目录</td>\n    <td>执行**docker build**的目录。</td>\n  </tr>\n<tr>\n    <td>Dockerfile路径</td>\n    <td>Dockefile相对于“工作目录”的路径。</td>\n</tr>\n<tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n\n",[[1629249470518,["lixia@LAPTOP-FEL3RH8E",[[-1,1184,"**"]],[1186,1186],[1184,1184]]],[1629249474680,["lixia@LAPTOP-FEL3RH8E",[[1,1184,"</b>"]],[1184,1184],[1188,1188]]],[1629249475954,["lixia@LAPTOP-FEL3RH8E",[[-1,1200,"**"],[1,1202,"</b>"]],[1200,1202],[1204,1204]]],[1629249477999,["lixia@LAPTOP-FEL3RH8E",[[-1,1185,"/"]],[1186,1186],[1185,1185]]]],null,"lixia@LAPTOP-FEL3RH8E"],["c6ea83cf-485b-4bbe-9609-9cbf8545466c",1639103015783,"---\nenable html: true\n---\n# Docker镜像\n\nCloud Native通过Docker构建组件，提供对各语言的通用镜像构建能力，使您可以通过使用代码库中的Dockerfile构建容器镜像，并推送到容器镜像仓库中。\n\n### 前提条件\n* 构建的代码库中已上传Dockerfile文件。Dockerfile的信息请参见[Docker官网](https://www.docker.org.cn/)。\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle、NPM、Conan构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > Docker镜像构建”步骤。\n2. 根据下表的描述，设置Docker镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-docker-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>工具版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>工作目录</td>\n    <td>执行<b>docker build</b>的目录。</td>\n  </tr>\n<tr>\n    <td>Dockerfile路径</td>\n    <td>Dockefile相对于“工作目录”的路径。</td>\n</tr>\n<tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n\n",[[1639102959690,["lixia@LAPTOP-FEL3RH8E",[[-1,38,"Cloud Native"],[1,50,"系统"]],[38,38],[40,40]]],[1639102965759,["lixia@LAPTOP-FEL3RH8E",[[-1,344,"Cloud Native系"]],[344,357],[344,344]]],[1639102968230,["lixia@LAPTOP-FEL3RH8E",[[1,344,"系"]],[344,344],[345,345]]],[1639102972791,["lixia@LAPTOP-FEL3RH8E",[[-1,386,"Cloud Native"],[1,398,"本系统"]],[386,386],[389,389]]]],null,"lixia@LAPTOP-FEL3RH8E"]]}