{"compress":true,"commitItems":[["0971df69-249d-43a3-9d21-b2abf9f45b64",1630375860279,"---\nenable html: true\n---\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed.\n",[[1630375854054,["lixia@LAPTOP-FEL3RH8E",[[-1,28,"Lorem ipsum"]],[28,28],[28,28]]],[1630375859220,["lixia@LAPTOP-FEL3RH8E",[[1,28,"Spring Boot"]],[28,28],[39,39]]],[1630375862855,["lixia@LAPTOP-FEL3RH8E",[[1,39,"应用镜像构建"]],[39,39],[45,45]]],[1630375866179,["lixia@LAPTOP-FEL3RH8E",[[-1,47,"Lorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed."]],[47,953],[47,47]]],[1630375875386,["lixia@LAPTOP-FEL3RH8E",[[1,47,"您可以使用tomcat应用镜像构建，将Maven或Gradle构建后Java软件包构建为镜像软件包，并推送到Docker镜像仓库中。tomcat应用镜像构建不需要编写Dockerfile文件，可以更简便地实现Java工程的镜像构建。\n\n### 前提条件\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。       \n您可以将Maven、Gradle构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。   \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > tomcat应用镜像构建”步骤。\n2. 根据下表的描述，设置tomcat应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-tomcat-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>tomcat版本和JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取代码部署文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为部署文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示部署文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择部署文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n"]],[47,47],[1979,1979]]],[1630375878411,["lixia@LAPTOP-FEL3RH8E",[[-1,52,"tomcat"],[1,58,"S"]],[52,58],[53,53]]],[1630375882058,["lixia@LAPTOP-FEL3RH8E",[[1,53,"pring Boot"]],[53,53],[63,63]]],[1630375892113,["lixia@LAPTOP-FEL3RH8E",[[-1,118,"tomcat"],[1,124,"S"]],[118,124],[119,119]]],[1630375895794,["lixia@LAPTOP-FEL3RH8E",[[1,119,"pring Boot"]],[119,119],[129,129]]],[1630376005769,["lixia@LAPTOP-FEL3RH8E",[[1,47,"如果构建的代码采用Spring Boot框架开发，"]],[47,47],[72,72]]],[1630376061434,["lixia@LAPTOP-FEL3RH8E",[[1,69,"和JavaYU"]],[69,69],[76,76]]],[1630376062175,["lixia@LAPTOP-FEL3RH8E",[[-1,74,"YU"]],[76,76],[74,74]]],[1630376063579,["lixia@LAPTOP-FEL3RH8E",[[1,74,"语言"]],[74,74],[76,76]]],[1630376089280,["lixia@LAPTOP-FEL3RH8E",[[-1,568,"tomcat"],[1,574,"S"]],[568,574],[569,569]]],[1630376092876,["lixia@LAPTOP-FEL3RH8E",[[1,569,"pringBoot"]],[569,569],[578,578]]],[1630376096913,["lixia@LAPTOP-FEL3RH8E",[[-1,602,"tomcat"],[1,608,"S"]],[602,608],[603,603]]],[1630376100807,["lixia@LAPTOP-FEL3RH8E",[[1,603,"pringBoot"]],[603,603],[612,612]]],[1630376133702,["lixia@LAPTOP-FEL3RH8E",[[-1,832,"tomcat版本和"]],[832,841],[832,832]]],[1630377052743,["lixia@LAPTOP-FEL3RH8E",[[-1,939,"部署"],[1,941,"构建"]],[939,939],[941,941]]],[1630377054962,["lixia@LAPTOP-FEL3RH8E",[[1,941,"源"]],[941,941],[942,942]]],[1630377061084,["lixia@LAPTOP-FEL3RH8E",[[-1,975,"部署"],[1,977,"构源"]],[975,975],[977,977]]],[1630377062092,["lixia@LAPTOP-FEL3RH8E",[[-1,975,"构源"]],[977,977],[975,975]]],[1630377064476,["lixia@LAPTOP-FEL3RH8E",[[1,975,"构建源"]],[975,975],[978,978]]],[1630377073121,["lixia@LAPTOP-FEL3RH8E",[[-1,1066,"部署"],[1,1068,"构建"]],[1066,1066],[1068,1068]]],[1630377074472,["lixia@LAPTOP-FEL3RH8E",[[1,1068,"源文件"]],[1068,1068],[1071,1071]]],[1630377077252,["lixia@LAPTOP-FEL3RH8E",[[-1,1070,"件文"]],[1071,1071],[1069,1069]]],[1630377082774,["lixia@LAPTOP-FEL3RH8E",[[-1,1148,"部署"],[1,1150,"构建"]],[1148,1148],[1150,1150]]],[1630377086237,["lixia@LAPTOP-FEL3RH8E",[[1,1150,"源文件"]],[1150,1150],[1153,1153]]],[1630377087277,["lixia@LAPTOP-FEL3RH8E",[[-1,1152,"件文"]],[1153,1153],[1151,1151]]],[1630377238044,["lixia@LAPTOP-FEL3RH8E",[[-1,659,"tomcat"]],[665,665],[659,659]]],[1630377241216,["lixia@LAPTOP-FEL3RH8E",[[1,659,"springboot"]],[659,659],[669,669]]],[1630398707529,["lixia@LAPTOP-FEL3RH8E",[[-1,470,"您可以将Maven、Gradle构建完成的软件包再打包为Docker镜像，也可以直接将代码打包为Docker镜像，用于K8s部署。 "]],[470,536],[470,470]]],[1630398708045,["lixia@LAPTOP-FEL3RH8E",[[-1,469,"\n"]],[470,470],[469,469]]],[1630398745651,["lixia@LAPTOP-FEL3RH8E",[[-1,193,"Java工程"]],[197,197],[193,193]]],[1630398746407,["lixia@LAPTOP-FEL3RH8E",[[1,193,"A"]],[193,193],[194,194]]],[1630398747347,["lixia@LAPTOP-FEL3RH8E",[[-1,193,"A"]],[194,194],[193,193]]],[1630398755852,["lixia@LAPTOP-FEL3RH8E",[[1,193,"Spring Boot应用"]],[193,193],[206,206]]],[1630400565088,["lixia@LAPTOP-FEL3RH8E",[[1,214,"\n"]],[212,212],[213,213]]],[1630400566183,["lixia@LAPTOP-FEL3RH8E",[[1,213,"tomcat应用镜像构建支持将Java web类应用以tomcat的方式进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成Java web类应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。"]],[213,213],[331,331]]],[1630400567740,["lixia@LAPTOP-FEL3RH8E",[[1,213,"\n"]],[212,212],[213,213]]],[1630400570149,["lixia@LAPTOP-FEL3RH8E",[[-1,214,"tomcat"],[1,220,"S"]],[214,220],[215,215]]],[1630400574081,["lixia@LAPTOP-FEL3RH8E",[[1,215,"pring Boot"]],[215,215],[225,225]]],[1630400588502,["lixia@LAPTOP-FEL3RH8E",[[-1,238," web类应用"],[1,245,"语言"]],[238,238],[240,240]]],[1630400589247,["lixia@LAPTOP-FEL3RH8E",[[1,240,"开发"]],[240,240],[242,242]]],[1630400597037,["lixia@LAPTOP-FEL3RH8E",[[-1,240,"开发"]],[242,242],[240,240]]],[1630400611488,["lixia@LAPTOP-FEL3RH8E",[[1,240,"和Spring Boot框架开发的应用"]],[240,240],[259,259]]],[1630400616549,["lixia@LAPTOP-FEL3RH8E",[[-1,259,"以tomcat的方"]],[259,259],[259,259]]],[1630400617554,["lixia@LAPTOP-FEL3RH8E",[[-1,259,"式"]],[259,259],[259,259]]],[1630400631550,["lixia@LAPTOP-FEL3RH8E",[[-1,293,"Java web类"]],[293,302],[293,293]]],[1630400872335,["lixia@LAPTOP-FEL3RH8E",[[-1,47,"如果构建的代码采用Spring Boot框架和Java语言开发，您可以使用Spring Boot应用镜像构建，将Maven或Gradle构建后Java软件包构建为镜像软件包，并推送到Docker镜像仓库中。Spring Boot应用镜像构建不需要编写Dockerfile文件，可以更简便地实现Spring Boot应用的镜像构建。\n"]],[47,213],[47,47]]],[1630400872921,["lixia@LAPTOP-FEL3RH8E",[[-1,47,"\n"]],[47,47],[47,47]]]],null,"lixia@LAPTOP-FEL3RH8E"],["f5a7055d-389b-4283-9611-e05695d3354d",1630401457434,"---\nenable html: true\n---\n# Spring Boot应用镜像构建\n\nSpring Boot应用镜像构建支持将Java语言和Spring Boot框架开发的应用进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。         \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > SpringBoot应用镜像构建”步骤。\n2. 根据下表的描述，设置SpringBoot应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-springboot-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取代码构建源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为构建源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1630401415844,["lixia@LAPTOP-FEL3RH8E",[[-1,834,"代码"],[1,836,"镜像的"]],[834,834],[839,839]]],[1630401421468,["lixia@LAPTOP-FEL3RH8E",[[1,873,"镜像"]],[873,873],[875,875]]],[1630401423632,["lixia@LAPTOP-FEL3RH8E",[[1,877,"的"]],[877,877],[878,878]]],[1630401430114,["lixia@LAPTOP-FEL3RH8E",[[1,967,"镜像"]],[967,967],[969,969]]],[1630401435804,["lixia@LAPTOP-FEL3RH8E",[[-1,839,"源"]],[840,840],[839,839]]],[1630401438798,["lixia@LAPTOP-FEL3RH8E",[[-1,877,"源"]],[878,878],[877,877]]],[1630401441802,["lixia@LAPTOP-FEL3RH8E",[[-1,969,"源"]],[970,970],[969,969]]],[1630401489126,[null,[[-1,836,"的"],[1,839,"的"]],[836,836],[840,840]]],[1630401489127,[null,[[1,836,"的"],[-1,838,"的"]],[840,840],[836,836]]],[1630401457611,["lixia@LAPTOP-FEL3RH8E",[[1,969,"源"]],[969,969],[970,970]]],[1630401458291,["lixia@LAPTOP-FEL3RH8E",[[1,877,"源"]],[877,877],[878,878]]],[1630401458926,["lixia@LAPTOP-FEL3RH8E",[[1,839,"源"]],[839,839],[840,840]]],[1630401469918,["lixia@LAPTOP-FEL3RH8E",[[1,1051,"镜像"]],[1051,1051],[1053,1053]]]],null,"lixia@LAPTOP-FEL3RH8E"],["5c14d1f1-e8d6-448b-9697-2f17d1db0f09",1639103018583,"---\nenable html: true\n---\n# Spring Boot应用镜像构建\n\nSpring Boot应用镜像构建支持将Java语言和Spring Boot框架开发的应用进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到Cloud Native系统的Docker仓库，也可以推送到第三方Docker仓库。           \nCloud Native的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。         \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > SpringBoot应用镜像构建”步骤。\n2. 根据下表的描述，设置SpringBoot应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-springboot-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取镜像构建的源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为镜像构建的源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示镜像构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择镜像构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1639103013781,["lixia@LAPTOP-FEL3RH8E",[[-1,317,"Cloud Native"]],[317,329],[317,317]]],[1639103017645,["lixia@LAPTOP-FEL3RH8E",[[-1,359,"Cloud Native"],[1,371,"本系统"]],[359,359],[362,362]]]],null,"lixia@LAPTOP-FEL3RH8E"],["00e17d45-d3d5-47c8-8712-4c77865b10fc",1639533644636,"---\nenable html: true\n---\n# Spring Boot应用镜像构建\n\nSpring Boot应用镜像构建支持将Java语言和Spring Boot框架开发的应用进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到系统的Docker仓库，也可以推送到第三方Docker仓库。           \n本系统的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。         \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > SpringBoot应用镜像构建”步骤。\n2. 根据下表的描述，设置SpringBoot应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-springboot-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取镜像构建的源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为镜像构建的源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示镜像构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择镜像构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置普通参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1639533637725,["lixia@LAPTOP-FEL3RH8E",[[-1,1303,"普通"]],[1305,1305],[1303,1303]]],[1639533639618,["lixia@LAPTOP-FEL3RH8E",[[1,1303,"六时许Iain"]],[1303,1303],[1310,1310]]],[1639533641566,["lixia@LAPTOP-FEL3RH8E",[[-1,1303,"六时许Iain"]],[1310,1310],[1303,1303]]],[1639533643673,["lixia@LAPTOP-FEL3RH8E",[[1,1303,"流水线"]],[1303,1303],[1306,1306]]]],null,"lixia@LAPTOP-FEL3RH8E"],["92a5c98e-c575-4e8c-b17d-bffcc1172bd4",1640920796275,"---\nenable html: true\n---\n# Spring Boot应用镜像构建\n\nSpring Boot应用镜像构建支持将Java语言和Spring Boot框架开发的应用进行容器镜像构建。在构建时只需指定编译后的文件和构建工具版本即可完成应用的容器镜像构建，而无需编写Dockerfile文件，操作更简便，效率更高。\n\n### 前提条件\n* 已创建Docker仓库的授权类接入点（请参见[管理授权类接入点](6.7.3 管理授权类接入点.html)），或者已获取Docker仓库的仓库地址、用户名密码、仓库项目名称，并且Docker仓库与本系统可互联互通。\n\n### 背景信息\n您可以将Docker镜像构建后的制品推送到系统的Docker仓库，也可以推送到第三方Docker仓库。           \n本系统的Docker镜像仓库的信息请通过项目的“制品库 > docker镜像”查看。         \n\n### 操作步骤\n1. 在流水线任务中，添加“构建 > SpringBoot应用镜像构建”步骤。\n2. 根据下表的描述，设置SpringBoot应用镜像构建步骤的参数，单击“保存”。      \n   <img src=\"fig/流水线-springboot-配置.png\" style=\"zoom:50%\">          \n   <table>\n<tr>\n    <th>参数</th>\n    <th>说明</th>\n</tr>\n<tr>\n    <td>步骤名称 </td>\n    <td>自定义步骤的名称。支持最多32个字符。</td>\n</tr>\n<tr>\n    <td>JDK版本</td>\n    <td>选择构建工具的版本。</td>\n</tr>\n<tr>\n    <td>部署文件来源 </td>\n    <td><ul><li>代码库：从执行机的“部署文件相对路径”中获取镜像构建的源文件。</li><li>制品库：从制品库的文件仓库中拉取软件包作为镜像构建的源文件。</li></ul></td>\n</tr>\n<tr>\n    <td>部署文件相对路径</td>\n    <td>“部署文件来源”选择“代码库”时，本参数有效。<p>表示镜像构建源文件相对于文件根目录的相对路径。最多支持128个字符。</p></td>\n</tr>\n<tr>\n    <td>过滤规则表达式</td>\n    <td>选择镜像构建源文件时，将排除满足表达式条件的文件和文件夹。可通过参数右侧的“添加”按钮，添加多条规则。有多条规则时，取所有规则的并集。<p>表达式从项目根目录开始匹配：“?”匹配单个字符；“** ”匹配多个文件夹；“* ”匹配多个字符。例如，匹配src目录下的Java文件，则表达式设置为：src/** /*.java。</p></td>\n</tr>\n<tr>\n    <td>制品库文件仓库文件版本</td>\n    <td>“部署文件来源”选择“制品库”时，本参数有效。<p>您需要先将文件仓库的文件版本设置为<a href=\"12.6.1 设置流水线参数.html#添加制品库文件仓库类参数\">制品库文件仓库类参数</a>中的“版本号”参数，然后从下拉菜单中选择。</td>\n    </tr>\n<tr>\n    <td>镜像名称</td>\n    <td>可以选择已设置的字符串类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n</tr>\n<tr>\n    <td>镜像标签</td>\n    <td>可以选择已设置的字符串、自增长类型参数，或者单击对话框，直接输入自定义的镜像名称。字符串、自增长类型参数的设置请参见<a href=\"12.6.1 设置流水线参数.html\">设置流水线参数</a>。</td>\n    </tr>\n  <tr>\n    <td>推送制品库</td>\n    <td><ul><li><b>当前项目Docker仓库</b>：仓库在本项目的“制品库 > docker镜像”中。</li>\n    <li><b>AMP其它项目或第三方Docker仓库</b>：可以选择已配置的Docker类<a href=\"6.7.3 管理授权类接入点.html\">授权接入点</a>，或者单击“新增”创建新的Docker仓库。然后设置“仓库项目名称”。</li>\n    </td>\n</tr>\n</table>\n\n",[[1640920770421,["lixia@LAPTOP-FEL3RH8E",[[-1,216," 管理授权类接入点.html"],[1,230,"-manage-auth-ap.md"]],[216,230],[234,234]]],[1640920778779,["lixia@LAPTOP-FEL3RH8E",[[-1,1822," 管理授权类接入点.html"],[1,1836,"-manage-auth-ap.md"]],[1822,1836],[1840,1840]]],[1640920787232,["lixia@LAPTOP-FEL3RH8E",[[-1,1622," 设置流水线参数.html"],[1,1635,"-set-parms.md"]],[1622,1635],[1635,1635]]],[1640920789405,["lixia@LAPTOP-FEL3RH8E",[[-1,1479," 设置流水线参数.html"],[1,1492,"-set-parms.md"]],[1479,1492],[1492,1492]]],[1640920793007,["lixia@LAPTOP-FEL3RH8E",[[-1,1304," 设置流水线参数.html"],[1,1317,"-set-parms.md"]],[1304,1317],[1317,1317]]]],null,"lixia@LAPTOP-FEL3RH8E"]]}