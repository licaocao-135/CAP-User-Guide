{"compress":true,"commitItems":[["ad2363ea-47ed-43ae-babd-661b28a77d46",1613976362973,"---\nenable html: true\n---\n# Lorem ipsum\n\nLorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed.\n",[[1613976342358,["lixia@LAPTOP-FEL3RH8E",[[-1,28,"Lorem ipsum"],[1,39,"通过Git Bash Linux Git mac Git客户端管理标签"]],[28,39],[63,63]]],[1613976344937,["lixia@LAPTOP-FEL3RH8E",[[-1,65,"Lorem ipsum dolor sit amet, dictas cetero eam in, falli feugait ne duo. Agam causae dolorem ea sed. Eam mollis maiorum assueverit eu <span style=\"color: red;\">per stet quidam molestiae eu</span>. Omnesque inimicus accusamus id quo.\n\nTamquam facilisi ea eum, reque saepe interpretaris ex usu, nibh explicari ei qui.\n\n```javascript\nconsole.log(Array.from('foo'));\n// expected output: Array [\"f\", \"o\", \"o\"]\n\nconsole.log(Array.from([1, 2, 3], x => x + x));\n// expected output: Array [2, 4, 6]\n```\n\n## Syntax\n\n    Lorem.ipsum(epicurei[, saepe[, explicari]])\n\n**Parameters**\n\n| Senserit  | Repudiandae                         | Vis |\n| --------- | ----------------------------------- | --- |\n| epicurei  | Usu no tale prima, vis fugit  id.   | Cu  |\n| saepe     | Ea vis graecis concludaturque.      | Cum |\n| explicari | Clita quando `this` in mea `saepe`. | Cum |\n\n**Return value**\n\nEa alii putent integre sed."]],[65,971],[65,65]]],[1613976348966,["lixia@LAPTOP-FEL3RH8E",[[-1,38," "],[1,39,"/"]],[38,39],[39,39]]],[1613976351406,["lixia@LAPTOP-FEL3RH8E",[[-1,48," "],[1,49,"/"]],[48,49],[49,49]]],[1613976354942,["lixia@LAPTOP-FEL3RH8E",[[1,65,"通过Git Bash/Linux Git/mac Git客户端管理标签"]],[65,65],[100,100]]],[1613976357777,["lixia@LAPTOP-FEL3RH8E",[[-1,96,"管理标签"]],[100,100],[96,96]]],[1613976359309,["lixia@LAPTOP-FEL3RH8E",[[1,96,"keyi "]],[96,96],[101,101]]],[1613976360364,["lixia@LAPTOP-FEL3RH8E",[[-1,96,"keyi "]],[101,101],[96,96]]],[1613976361764,["lixia@LAPTOP-FEL3RH8E",[[1,96,"可hi"]],[96,96],[99,99]]],[1613976362587,["lixia@LAPTOP-FEL3RH8E",[[-1,96,"可hi"]],[99,99],[96,96]]],[1613976375104,["lixia@LAPTOP-FEL3RH8E",[[1,96,"可以创建、删除标签，为当前"]],[96,96],[109,109]]],[1613976376836,["lixia@LAPTOP-FEL3RH8E",[[-1,107,"当前"]],[109,109],[107,107]]],[1613976383887,["lixia@LAPTOP-FEL3RH8E",[[1,107,"最新提交的版本和历史办"]],[107,107],[118,118]]],[1613976384398,["lixia@LAPTOP-FEL3RH8E",[[-1,117,"办"]],[118,118],[117,117]]],[1613976403515,["lixia@LAPTOP-FEL3RH8E",[[1,117,"版本打标签，以及使用标签找回历史版本。"]],[117,117],[136,136]]],[1613976424008,["lixia@LAPTOP-FEL3RH8E",[[-1,117,"版本"],[1,119,"立交"]],[117,117],[119,119]]],[1613976424754,["lixia@LAPTOP-FEL3RH8E",[[-1,117,"立交"]],[119,119],[117,117]]],[1613976425732,["lixia@LAPTOP-FEL3RH8E",[[1,117,"提交"]],[117,117],[119,119]]],[1613976428704,["lixia@LAPTOP-FEL3RH8E",[[1,137,"\n"]],[136,136],[137,137]]],[1613976429021,["lixia@LAPTOP-FEL3RH8E",[[1,138,"\n"]],[137,137],[138,138]]],[1613976453100,["lixia@LAPTOP-FEL3RH8E",[[1,138,"#### 通过Git Bash/Linux Git/mac Git客户端创建\n\n通过Git Bash/Linux Git/mac Git客户端创建标签时，会自动给最近的提交打上标签。\n1. 创建标签。\n  * 创建轻量标签\n```\n    # 命令\n    $ git tag <标签名称>\n    # 举例\n    $ git tag V1.0\n```\n  * 创建附注标签\n```\n     # 命令\n     $ git tag -a <标签名称> -m \"<标签说明>\"\n     # 举例\n     $ git tag -a V1.0 -m \"第一个版本\"\n```\n2. 将标签推送到远端仓库。\n```\n    # 推送某个标签的命令\n    $ git push <远程仓库地址或别名> <推送的标签名称>\n    # 推送某个标签的举例\n    $ git push origin V1.0\n    # 推送全部标签的命令\n    $ git push <远程仓库地址或别名> --tags\n    # 推送某个标签的举例\n    $ git push origin --tags\n```\n> [!NOTE]\n> 如果您在远程仓库建立了一个标签，又在本地仓库建立了一个同名的标签，则推送时会失败（出现标签冲突，如下图所示），只能删除其一，再次推送。\n> ![](fig/git-标签-02.png)\n\n\n标签的其它相关操作命令如下：\n```\n    # 查看仓库内的所有标签\n    $ git tag\n    # 查看指定标签的信息\n    $ git show <查看的标签名称>\n    # 删除本地标签\n    $ git tag -d <删除的标签名称>\n    # 删除远端仓库的标签\n    $ git push <远程仓库地址或别名> :ref/tags/<删除的标签名称>\n```\n\n### 为历史提交打标签\n1. 查看历史提交，获取历史提交ID。\n```\n    $ git log\n```\n\n历史提交ID如下图所示。\n![](fig/git-标签-03.png)\n\n2. 给某个历史提交打标签。\n```\n    # 命令\n    $ git tag -a historyTag -m \"<备注信息>\" <历史提交ID>\n    # 举例\n    $ git tag -a historyTag -m \"make history rag\" e22119\n```\n\n其中，命令中的“历史提交ID”可以只截取前面几位数，无需完整的ID。\n\n\n### 使用标签找回历史版本\n当您需要查看某个标签指向的版本代码时，可以将其检出到工作区。被检出的版本是某个版本的快照，不能add、commit。因此，如果您需要修改此版本的代码，您可以基于工作区新建一条分支，再在此分支上修改代码，并将此分支合入主干。具体的操作步骤如下。\n您可以根据实际情况选择执行相应的步骤。\n1.  通过标签检出历史版本到工作区。\n```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n\n```\n   \n2.  基于当前的工作区新建一条分支，并切换到新分支。\n\n```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```\n\n3.  （可选）如果修改了新建的分支的内容，需要将修改内容提交到该分支的版本库中，并推送到远端仓库。\n```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```\n\n\n4.  将新建立的分支内容合入主干分支master。\n      详细操作请参见[通过Git Bas/Llinux Git/mac Git客户端开发并提交代码](8-6-1-1-通过git-bash-linux-git-mac-git客户端#操作步骤)中的步骤6 ”合并分支“。"]],[138,138],[1981,1981]]],[1613976454970,["lixia@LAPTOP-FEL3RH8E",[[-1,141,"#"]],[142,142],[141,141]]],[1613976457826,["lixia@LAPTOP-FEL3RH8E",[[-1,142,"通过Git Bash/Linux Git/mac Git客户端"]],[142,173],[142,142]]],[1613976460707,["lixia@LAPTOP-FEL3RH8E",[[1,144,"标签"]],[144,144],[146,146]]],[1613976469563,["lixia@LAPTOP-FEL3RH8E",[[-1,203,"创建"]],[205,205],[203,203]]],[1613976471078,["lixia@LAPTOP-FEL3RH8E",[[1,203,"新建"]],[203,203],[205,205]]],[1613976473338,["lixia@LAPTOP-FEL3RH8E",[[-1,213,"创建"]],[215,215],[213,213]]],[1613976474404,["lixia@LAPTOP-FEL3RH8E",[[1,213,"新建"]],[213,213],[215,215]]],[1613976476451,["lixia@LAPTOP-FEL3RH8E",[[-1,290,"创建"]],[292,292],[290,290]]],[1613976477471,["lixia@LAPTOP-FEL3RH8E",[[1,290,"新建"]],[290,290],[292,292]]],[1613976497366,["lixia@LAPTOP-FEL3RH8E",[[1,207,"，并被"]],[207,207],[210,210]]],[1613976498039,["lixia@LAPTOP-FEL3RH8E",[[-1,209,"被"]],[210,210],[209,209]]],[1613976501008,["lixia@LAPTOP-FEL3RH8E",[[1,209,"给"]],[209,209],[210,210]]],[1613976503404,["lixia@LAPTOP-FEL3RH8E",[[-1,207,"，并给"]],[210,210],[207,207]]]],null,"lixia@LAPTOP-FEL3RH8E"],["2bb75126-72eb-4153-8e9e-37468555b031",1617867337548,"---\nenable html: true\n---\n# 通过Git Bash/Linux Git/mac Git客户端管理标签\n\n通过Git Bash/Linux Git/mac Git客户端可以创建、删除标签，为最新提交的版本和历史提交打标签，以及使用标签找回历史版本。\n\n### 创建标签\n\n通过Git Bash/Linux Git/mac Git客户端创建标签时，会自动给最近的提交打上标签。\n1. 新建标签。\n  * 新建轻量标签\n```\n    # 命令\n    $ git tag <标签名称>\n    # 举例\n    $ git tag V1.0\n```\n  * 新建附注标签\n```\n     # 命令\n     $ git tag -a <标签名称> -m \"<标签说明>\"\n     # 举例\n     $ git tag -a V1.0 -m \"第一个版本\"\n```\n2. 将标签推送到远端仓库。\n```\n    # 推送某个标签的命令\n    $ git push <远程仓库地址或别名> <推送的标签名称>\n    # 推送某个标签的举例\n    $ git push origin V1.0\n    # 推送全部标签的命令\n    $ git push <远程仓库地址或别名> --tags\n    # 推送某个标签的举例\n    $ git push origin --tags\n```\n> [!NOTE]\n> 如果您在远程仓库建立了一个标签，又在本地仓库建立了一个同名的标签，则推送时会失败（出现标签冲突，如下图所示），只能删除其一，再次推送。\n> ![](fig/git-标签-02.png)\n\n\n标签的其它相关操作命令如下：\n```\n    # 查看仓库内的所有标签\n    $ git tag\n    # 查看指定标签的信息\n    $ git show <查看的标签名称>\n    # 删除本地标签\n    $ git tag -d <删除的标签名称>\n    # 删除远端仓库的标签\n    $ git push <远程仓库地址或别名> :ref/tags/<删除的标签名称>\n```\n\n### 为历史提交打标签\n1. 查看历史提交，获取历史提交ID。\n```\n    $ git log\n```\n\n历史提交ID如下图所示。\n![](fig/git-标签-03.png)\n\n2. 给某个历史提交打标签。\n```\n    # 命令\n    $ git tag -a historyTag -m \"<备注信息>\" <历史提交ID>\n    # 举例\n    $ git tag -a historyTag -m \"make history rag\" e22119\n```\n\n其中，命令中的“历史提交ID”可以只截取前面几位数，无需完整的ID。\n\n\n### 使用标签找回历史版本\n当您需要查看某个标签指向的版本代码时，可以将其检出到工作区。被检出的版本是某个版本的快照，不能add、commit。因此，如果您需要修改此版本的代码，您可以基于工作区新建一条分支，再在此分支上修改代码，并将此分支合入主干。具体的操作步骤如下。\n您可以根据实际情况选择执行相应的步骤。\n1.  通过标签检出历史版本到工作区。\n```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n\n```\n   \n2.  基于当前的工作区新建一条分支，并切换到新分支。\n\n```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```\n\n3.  （可选）如果修改了新建的分支的内容，需要将修改内容提交到该分支的版本库中，并推送到远端仓库。\n```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```\n\n\n4.  将新建立的分支内容合入主干分支master。\n      详细操作请参见[通过Git Bas/Llinux Git/mac Git客户端开发并提交代码](8-6-1-1-通过git-bash-linux-git-mac-git客户端#操作步骤)中的步骤6 ”合并分支“。\n",[[1617867310744,["lixia@LAPTOP-FEL3RH8E",[[-1,428,"命令"]],[428,430],[428,428]]],[1617867312458,["lixia@LAPTOP-FEL3RH8E",[[1,421,"命令："]],[421,421],[424,424]]],[1617867314380,["lixia@LAPTOP-FEL3RH8E",[[-1,430,"的"]],[431,431],[430,430]]],[1617867317743,["lixia@LAPTOP-FEL3RH8E",[[-1,481,"举例"]],[481,483],[481,481]]],[1617867319479,["lixia@LAPTOP-FEL3RH8E",[[1,474,"举例："]],[474,474],[477,477]]],[1617867321498,["lixia@LAPTOP-FEL3RH8E",[[-1,483,"的"]],[484,484],[483,483]]],[1617867323720,["lixia@LAPTOP-FEL3RH8E",[[-1,524,"命令"]],[524,526],[524,524]]],[1617867325233,["lixia@LAPTOP-FEL3RH8E",[[1,517,"命令："]],[517,517],[520,520]]],[1617867326888,["lixia@LAPTOP-FEL3RH8E",[[-1,526,"的"]],[527,527],[526,526]]],[1617867329441,["lixia@LAPTOP-FEL3RH8E",[[-1,574,"举例"]],[574,576],[574,574]]],[1617867332120,["lixia@LAPTOP-FEL3RH8E",[[1,567,"举例："]],[567,567],[570,570]]],[1617867333596,["lixia@LAPTOP-FEL3RH8E",[[-1,576,"的"]],[577,577],[576,576]]],[1617867392882,["lixia@LAPTOP-FEL3RH8E",[[1,972,"  "]],[972,972],[974,974]]],[1617867395009,["lixia@LAPTOP-FEL3RH8E",[[1,987,"  "]],[987,987],[989,989]]],[1617867401415,["lixia@LAPTOP-FEL3RH8E",[[1,989,"\n  "]],[986,986],[989,989]]],[1617867409665,["lixia@LAPTOP-FEL3RH8E",[[1,949,"2. \n2. \n"]],[948,948],[952,952]]],[1617867410425,["lixia@LAPTOP-FEL3RH8E",[[-1,949,"2. "]],[952,952],[949,949]]],[1617867414024,["lixia@LAPTOP-FEL3RH8E",[[-1,954,"```\n    $ git log\n```\n\n  历史提交ID如下图所示。\n  \n  ![](fig/git-标签-03.png)\n"]],[954,1020],[954,954]]],[1617867415030,["lixia@LAPTOP-FEL3RH8E",[[1,949,"```\n    $ git log\n```\n\n  历史提交ID如下图所示。\n  \n  ![](fig/git-标签-03.png)\n"]],[949,949],[1015,1015]]],[1617867418852,["lixia@LAPTOP-FEL3RH8E",[[-1,1019,"\n\n2."]],[1019,1023],[1019,1019]]],[1617867422620,["lixia@LAPTOP-FEL3RH8E",[[1,1165,"  "]],[1165,1165],[1167,1167]]],[1617867432535,["lixia@LAPTOP-FEL3RH8E",[[1,1341,"\n"]],[1341,1341],[1342,1342]]],[1617867433625,["lixia@LAPTOP-FEL3RH8E",[[1,1362,"\n"]],[1361,1361],[1362,1362]]],[1617867442343,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"2. \n"]],[1382,1382],[1386,1386]]],[1617867443704,["lixia@LAPTOP-FEL3RH8E",[[-1,1383,"2. \n"]],[1386,1386],[1382,1382]]],[1617867449752,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"2. \n2. \n"]],[1382,1382],[1386,1386]]],[1617867450549,["lixia@LAPTOP-FEL3RH8E",[[-1,1383,"2. "]],[1386,1386],[1383,1383]]],[1617867453969,["lixia@LAPTOP-FEL3RH8E",[[-1,1388,"```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n\n```"]],[1388,1466],[1388,1388]]],[1617867455655,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n\n```"]],[1383,1383],[1461,1461]]],[1617867459151,["lixia@LAPTOP-FEL3RH8E",[[-1,1465,"\n\n   \n2.  "]],[1465,1475],[1465,1465]]],[1617867462308,["lixia@LAPTOP-FEL3RH8E",[[-1,1489,"\n"]],[1489,1489],[1489,1489]]],[1617867473266,["lixia@LAPTOP-FEL3RH8E",[[1,1851,"\n      "]],[1851,1851],[1858,1858]]],[1617867584042,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"2. \n"]],[1382,1382],[1386,1386]]],[1617867585451,["lixia@LAPTOP-FEL3RH8E",[[-1,1383,"2. "]],[1386,1386],[1383,1383]]],[1617867587597,["lixia@LAPTOP-FEL3RH8E",[[1,1463,"\n"]],[1462,1462],[1463,1463]]],[1617867589280,["lixia@LAPTOP-FEL3RH8E",[[1,1491,"3. \n"]],[1490,1490],[1494,1494]]],[1617867590241,["lixia@LAPTOP-FEL3RH8E",[[-1,1491,"3. "]],[1494,1494],[1491,1491]]],[1617867593118,["lixia@LAPTOP-FEL3RH8E",[[1,1631,"4. \n"]],[1630,1630],[1634,1634]]],[1617867593994,["lixia@LAPTOP-FEL3RH8E",[[-1,1631,"4. "]],[1634,1634],[1631,1631]]],[1617867596314,["lixia@LAPTOP-FEL3RH8E",[[-1,1821,"\n"]],[1821,1821],[1821,1821]]],[1617867603038,["lixia@LAPTOP-FEL3RH8E",[[-1,1960,"”"]],[1961,1961],[1960,1960]]],[1617867603568,["lixia@LAPTOP-FEL3RH8E",[[1,1960,"“"]],[1960,1960],[1961,1961]]],[1617867604878,["lixia@LAPTOP-FEL3RH8E",[[-1,1965,"“"]],[1966,1966],[1965,1965]]],[1617867605376,["lixia@LAPTOP-FEL3RH8E",[[1,1965,"”"]],[1965,1965],[1966,1966]]],[1617867701026,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"2. \n2. \n"]],[1382,1382],[1386,1386]]],[1617867701792,["lixia@LAPTOP-FEL3RH8E",[[-1,1383,"2. "]],[1386,1386],[1383,1383]]],[1617867705261,["lixia@LAPTOP-FEL3RH8E",[[-1,1389,"```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n\n```"]],[1389,1467],[1389,1389]]],[1617867707263,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n\n```"]],[1383,1383],[1461,1461]]],[1617867708291,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"2. \n"]],[1382,1382],[1386,1386]]],[1617867709599,["lixia@LAPTOP-FEL3RH8E",[[-1,1466,"2. "]],[1469,1469],[1467,1467]]],[1617867711122,["lixia@LAPTOP-FEL3RH8E",[[1,1466,"2. "]],[1467,1467],[1469,1469]]],[1617867711803,["lixia@LAPTOP-FEL3RH8E",[[-1,1383,"2. \n"]],[1386,1386],[1382,1382]]],[1617867714160,["lixia@LAPTOP-FEL3RH8E",[[1,1383,"\n"]],[1383,1383],[1384,1384]]],[1617867715416,["lixia@LAPTOP-FEL3RH8E",[[1,1463,"\n"]],[1462,1462],[1463,1463]]],[1617867718277,["lixia@LAPTOP-FEL3RH8E",[[-1,1467,"\n\n\n\n2. "]],[1467,1474],[1467,1467]]],[1617867720951,["lixia@LAPTOP-FEL3RH8E",[[1,1491,"3. \n3. \n"]],[1490,1490],[1494,1494]]],[1617867722757,["lixia@LAPTOP-FEL3RH8E",[[-1,1491,"3. "]],[1494,1494],[1491,1491]]],[1617867726476,["lixia@LAPTOP-FEL3RH8E",[[-1,1497,"```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```"]],[1497,1583],[1497,1497]]],[1617867727492,["lixia@LAPTOP-FEL3RH8E",[[1,1491,"```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```"]],[1491,1491],[1577,1577]]],[1617867728728,["lixia@LAPTOP-FEL3RH8E",[[1,1491,"\n"]],[1491,1491],[1492,1492]]],[1617867729814,["lixia@LAPTOP-FEL3RH8E",[[1,1579,"\n"]],[1578,1578],[1579,1579]]],[1617867733751,["lixia@LAPTOP-FEL3RH8E",[[-1,1583,"\n\n\n\n3.  "]],[1583,1591],[1583,1583]]],[1617867737168,["lixia@LAPTOP-FEL3RH8E",[[1,1630,"4. \n4. \n"]],[1629,1629],[1633,1633]]],[1617867737905,["lixia@LAPTOP-FEL3RH8E",[[-1,1630,"4. "]],[1633,1633],[1630,1630]]],[1617867740948,["lixia@LAPTOP-FEL3RH8E",[[-1,1636,"```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```"]],[1636,1823],[1636,1636]]],[1617867742634,["lixia@LAPTOP-FEL3RH8E",[[1,1630,"```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```"]],[1630,1630],[1817,1817]]],[1617867743895,["lixia@LAPTOP-FEL3RH8E",[[1,1630,"\n"]],[1630,1630],[1631,1631]]],[1617867744822,["lixia@LAPTOP-FEL3RH8E",[[1,1819,"\n"]],[1818,1818],[1819,1819]]],[1617867747047,["lixia@LAPTOP-FEL3RH8E",[[-1,1823,"\n\n\n\n4. "]],[1823,1830],[1823,1823]]],[1617867984408,["lixia@LAPTOP-FEL3RH8E",[[-1,1341,"\n"]],[1340,1340],[1340,1340]]],[1617867984730,["lixia@LAPTOP-FEL3RH8E",[[-1,1340,"\n"]],[1340,1340],[1340,1340]]],[1617867993170,["lixia@LAPTOP-FEL3RH8E",[[1,1385,"2. \n"]],[1380,1380],[1384,1384]]],[1617867994286,["lixia@LAPTOP-FEL3RH8E",[[-1,1381,"2. "]],[1384,1384],[1381,1381]]],[1617867998293,["lixia@LAPTOP-FEL3RH8E",[[-1,1461,"\n"]],[1460,1460],[1460,1460]]],[1617868001178,["lixia@LAPTOP-FEL3RH8E",[[-1,1387,"```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n```"]],[1387,1464],[1387,1387]]],[1617868002513,["lixia@LAPTOP-FEL3RH8E",[[1,1381,"```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n```"]],[1381,1381],[1458,1458]]],[1617868006791,["lixia@LAPTOP-FEL3RH8E",[[-1,1462,"\n\n\n\n2. "]],[1462,1469],[1462,1462]]],[1617868010562,["lixia@LAPTOP-FEL3RH8E",[[1,1486,"3. \n3. \n"]],[1485,1485],[1489,1489]]],[1617868011357,["lixia@LAPTOP-FEL3RH8E",[[-1,1486,"3. "]],[1489,1489],[1486,1486]]],[1617868014228,["lixia@LAPTOP-FEL3RH8E",[[-1,1492,"```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```"]],[1492,1578],[1492,1492]]],[1617868015201,["lixia@LAPTOP-FEL3RH8E",[[1,1486,"```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```"]],[1486,1486],[1572,1572]]],[1617868018993,["lixia@LAPTOP-FEL3RH8E",[[-1,1576,"\n\n\n\n3. "]],[1576,1583],[1576,1576]]],[1617868023369,["lixia@LAPTOP-FEL3RH8E",[[1,1623,"4. \n4. \n"]],[1622,1622],[1626,1626]]],[1617868024166,["lixia@LAPTOP-FEL3RH8E",[[-1,1623,"4. "]],[1626,1626],[1623,1623]]],[1617868027151,["lixia@LAPTOP-FEL3RH8E",[[-1,1629,"```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```"]],[1629,1816],[1629,1629]]],[1617868028378,["lixia@LAPTOP-FEL3RH8E",[[1,1623,"```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```"]],[1623,1623],[1810,1810]]],[1617868031676,["lixia@LAPTOP-FEL3RH8E",[[-1,1814,"\n\n\n\n4.  "]],[1814,1822],[1814,1814]]],[1617868033391,["lixia@LAPTOP-FEL3RH8E",[[-1,1837,"      \n      "]],[1837,1850],[1837,1837]]],[1617868036013,["lixia@LAPTOP-FEL3RH8E",[[1,1837,"  \n  "]],[1837,1837],[1842,1842]]]],null,"lixia@LAPTOP-FEL3RH8E"],["b2c0ed44-1915-43fe-9099-4b37bac45ae5",1619746687885,"---\nenable html: true\n---\n# 通过Git Bash/Linux Git/mac Git客户端管理标签\n\n通过Git Bash/Linux Git/mac Git客户端可以创建、删除标签，为最新提交的版本和历史提交打标签，以及使用标签找回历史版本。\n\n### 创建标签\n\n通过Git Bash/Linux Git/mac Git客户端创建标签时，会自动给最近的提交打上标签。\n1. 新建标签。\n  * 新建轻量标签\n```\n    # 命令\n    $ git tag <标签名称>\n    # 举例\n    $ git tag V1.0\n```\n  * 新建附注标签\n```\n     # 命令\n     $ git tag -a <标签名称> -m \"<标签说明>\"\n     # 举例\n     $ git tag -a V1.0 -m \"第一个版本\"\n```\n2. 将标签推送到远端仓库。\n```\n    # 命令：推送某个标签\n    $ git push <远程仓库地址或别名> <推送的标签名称>\n    # 举例：推送某个标签\n    $ git push origin V1.0\n    # 命令：推送全部标签\n    $ git push <远程仓库地址或别名> --tags\n    # 举例：推送某个标签\n    $ git push origin --tags\n```\n> [!NOTE]\n> 如果您在远程仓库建立了一个标签，又在本地仓库建立了一个同名的标签，则推送时会失败（出现标签冲突，如下图所示），只能删除其一，再次推送。\n> ![](fig/git-标签-02.png)\n\n\n标签的其它相关操作命令如下：\n```\n    # 查看仓库内的所有标签\n    $ git tag\n    # 查看指定标签的信息\n    $ git show <查看的标签名称>\n    # 删除本地标签\n    $ git tag -d <删除的标签名称>\n    # 删除远端仓库的标签\n    $ git push <远程仓库地址或别名> :ref/tags/<删除的标签名称>\n```\n\n### 为历史提交打标签\n1. 查看历史提交，获取历史提交ID。\n```\n    $ git log\n```\n\n  历史提交ID如下图所示。\n  \n  ![](fig/git-标签-03.png)\n\n2.  给某个历史提交打标签。\n```\n    # 命令\n    $ git tag -a historyTag -m \"<备注信息>\" <历史提交ID>\n    # 举例\n    $ git tag -a historyTag -m \"make history rag\" e22119\n```\n\n  其中，命令中的“历史提交ID”可以只截取前面几位数，无需完整的ID。\n\n\n### 使用标签找回历史版本\n当您需要查看某个标签指向的版本代码时，可以将其检出到工作区。被检出的版本是某个版本的快照，不能add、commit。因此，如果您需要修改此版本的代码，您可以基于工作区新建一条分支，再在此分支上修改代码，并将此分支合入主干。具体的操作步骤如下。您可以根据实际情况选择执行相应的步骤。\n\n1.  通过标签检出历史版本到工作区。\n```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n```\n2. 基于当前的工作区新建一条分支，并切换到新分支。\n```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```\n3. （可选）如果修改了新建的分支的内容，需要将修改内容提交到该分支的版本库中，并推送到远端仓库。\n```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```\n4. 将新建立的分支内容合入主干分支master。\n  \n  详细操作请参见[通过Git Bas/Llinux Git/mac Git客户端开发并提交代码](8-6-1-1-通过git-bash-linux-git-mac-git客户端#操作步骤)中的步骤6 “合并分支”。\n",[[1619746677900,["lixia@LAPTOP-FEL3RH8E",[[-1,1890,"8-6-1-1-"],[1,1898,"9"]],[1890,1898],[1891,1891]]],[1619746681568,["lixia@LAPTOP-FEL3RH8E",[[1,1891,".6.1.1 "]],[1891,1891],[1898,1898]]],[1619746686865,["lixia@LAPTOP-FEL3RH8E",[[1,1929,".html"]],[1929,1929],[1934,1934]]]],null,"lixia@LAPTOP-FEL3RH8E"],["79a05663-7605-453b-88ba-f51441250f90",1619753076366,"---\nenable html: true\n---\n# 通过Git Bash/Linux Git/mac Git客户端管理标签\n\n通过Git Bash/Linux Git/mac Git客户端可以创建、删除标签，为最新提交的版本和历史提交打标签，以及使用标签找回历史版本。\n\n### 创建标签\n\n通过Git Bash/Linux Git/mac Git客户端创建标签时，会自动给最近的提交打上标签。\n1. 新建标签。\n  * 新建轻量标签\n```\n    # 命令\n    $ git tag <标签名称>\n    # 举例\n    $ git tag V1.0\n```\n  * 新建附注标签\n```\n     # 命令\n     $ git tag -a <标签名称> -m \"<标签说明>\"\n     # 举例\n     $ git tag -a V1.0 -m \"第一个版本\"\n```\n2. 将标签推送到远端仓库。\n```\n    # 命令：推送某个标签\n    $ git push <远程仓库地址或别名> <推送的标签名称>\n    # 举例：推送某个标签\n    $ git push origin V1.0\n    # 命令：推送全部标签\n    $ git push <远程仓库地址或别名> --tags\n    # 举例：推送某个标签\n    $ git push origin --tags\n```\n> [!NOTE]\n> 如果您在远程仓库建立了一个标签，又在本地仓库建立了一个同名的标签，则推送时会失败（出现标签冲突，如下图所示），只能删除其一，再次推送。\n> ![](fig/git-标签-02.png)\n\n\n标签的其它相关操作命令如下：\n```\n    # 查看仓库内的所有标签\n    $ git tag\n    # 查看指定标签的信息\n    $ git show <查看的标签名称>\n    # 删除本地标签\n    $ git tag -d <删除的标签名称>\n    # 删除远端仓库的标签\n    $ git push <远程仓库地址或别名> :ref/tags/<删除的标签名称>\n```\n\n### 为历史提交打标签\n1. 查看历史提交，获取历史提交ID。\n```\n    $ git log\n```\n\n  历史提交ID如下图所示。\n  \n  ![](fig/git-标签-03.png)\n\n2.  给某个历史提交打标签。\n```\n    # 命令\n    $ git tag -a historyTag -m \"<备注信息>\" <历史提交ID>\n    # 举例\n    $ git tag -a historyTag -m \"make history rag\" e22119\n```\n\n  其中，命令中的“历史提交ID”可以只截取前面几位数，无需完整的ID。\n\n\n### 使用标签找回历史版本\n当您需要查看某个标签指向的版本代码时，可以将其检出到工作区。被检出的版本是某个版本的快照，不能add、commit。因此，如果您需要修改此版本的代码，您可以基于工作区新建一条分支，再在此分支上修改代码，并将此分支合入主干。具体的操作步骤如下。您可以根据实际情况选择执行相应的步骤。\n\n1.  通过标签检出历史版本到工作区。\n```\n    # 命令\n    $ git checkout <标签名称>\n    # 举例\n    $ git checkout V2.0.0\n```\n2. 基于当前的工作区新建一条分支，并切换到新分支。\n```\n    # 命令\n    $ git switch -b <新分支名称>\n    # 举例\n    $ git switch -b forFixV2.0.0\n```\n3. （可选）如果修改了新建的分支的内容，需要将修改内容提交到该分支的版本库中，并推送到远端仓库。\n```\n    # 将修改添加到新分支的暂存区\n    $ git add .                           \n    # 将修改内容存入该分支的本地仓库\n    $ git commit -m \"fix bug for V2.0.0\"\n    # 将修改内容推送到远端仓库\n    $ git push origin forFixV2.0.0\n```\n4. 将新建立的分支内容合入主干分支master。\n  \n  详细操作请参见[通过Git Bas/Llinux Git/mac Git客户端开发并提交代码](9.6.1.1 通过git-bash-linux-git-mac-git客户端.html#操作步骤)中的步骤6 “合并分支”。\n",[[1619753072879,["lixia@LAPTOP-FEL3RH8E",[[-1,1900,"git-bash-l"],[1,1910,"Git Bash L"],[-1,1914,"-git-mac-g"],[1,1924," Git mac G"]],[1900,1926],[1926,1926]]]],null,"lixia@LAPTOP-FEL3RH8E"]]}